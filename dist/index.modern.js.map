{"version":3,"file":"index.modern.js","sources":["../src/convertToNested.ts","../src/parseSource.ts"],"sourcesContent":["import lodash from 'lodash'\n\nconst { each, setWith } = lodash\n\nconst convertToNested = object => {\n\n  const nested = {}\n\n  each(object, (value, key) => {\n    setWith(nested, key, value, Object)\n  })\n\n  return nested\n}\n\nexport { convertToNested }\n","import type { Config, Configs } from '@config-manager/types'\nimport lodash from 'lodash'\n\nimport { convertToNested } from '.'\n\nconst { assign, each, get, has, isObject, kebabCase, last, mapKeys, mapValues, merge, set, size, split, startCase, unset } = lodash\n\nconst getType = (config) => {\n  switch (typeof config.default) {\n    case `boolean`:\n      return `switch`\n    default:\n      return `input`\n  }\n}\n\nconst standardizeConfig = (key, config, skipDefaultCheck = false) => {\n\n  if (isObject(config)) {\n    if (!skipDefaultCheck && !has(config, `default`)) {\n      throw new Error(`Config \"${key}\" is missing a \"default\" value.`)\n    }\n  } else {\n    config = {\n      default: config,\n    }\n  }\n\n  return config\n}\n\nconst parseConfig = (key, config, options = {}) => {\n\n  config = standardizeConfig(key, config)\n\n  delete config.key\n\n  if (config.docLink) {\n    const docLinkText = `Documentation on this feature can be found <a href=\"${config.docLink}\">here</a>.`\n    config.hint = config.hint ? docLinkText + `<br>${config.hint}` : docLinkText\n    delete config.docLink\n  }\n\n  return assign({\n    default: null, // This is placed here so that `default` appears as first property\n    type: getType(config),\n    label: startCase(last(split(key, `.`))),\n    category: `setting`,\n  }, config, options)\n}\n\nconst parseConfigs = (configs: Configs, options = {}, callback = null) => {\n\n  configs = mapKeys(configs, (config: Config, key: string) => {\n    return config[`key`] ? config[`key`] : key\n  })\n\n  return mapValues(configs, (config: Config, key: string) => {\n\n    if (callback) {\n      callback(key, config)\n    }\n\n    return parseConfig(key, config, options)\n  })\n}\n\nconst parseUniqueConfigs = (set, configs, options) => {\n  return parseConfigs(configs, options, (key) => {\n    if (has(set, key)) {\n      throw new Error(`Duplicate key: \"${key}\"`)\n    }\n  })\n}\n\nconst parseConfigsIntoCollection = (set, configs, options) => {\n  merge(set, parseUniqueConfigs(set, configs, options))\n}\n\nconst getHelpers = (components, component) => {\n\n  const groupTypes = {\n    group: {\n      path: `groups`,\n    },\n    tab: {\n      path: `tabs`,\n    },\n  }\n\n  const walkConfigs = (configs, callback = null) => {\n\n    const walked = {}\n\n    each(configs, (config, key) => {\n      config = standardizeConfig(key, config)\n      if (callback) {\n        const {\n          config: newConfig,\n          key: newKey,\n        } = callback(key, config)\n        walked[newKey] = newConfig\n      } else {\n        walked[key] = config\n      }\n    })\n\n    return walked\n  }\n\n  const setComponentGroup = (name, label, configs, type = `group`) => {\n\n    let path = groupTypes[type].path\n    let replacement = {}\n\n    each(configs, config => {\n      if (config.group) {\n\n        // TODO: This variable should handle cases where group value is deeply nested\n        const groupExpanded = config.group\n\n        each(groupTypes, groupType => {\n          const group = get(components, [component, groupType.path, groupExpanded])\n          if (group) {\n            set(replacement, [groupType.path, groupExpanded], group)\n            unset(components, [component, groupType.path, groupExpanded])\n\n            const holder = get(components, [component, groupType.path], {})\n            if (size(holder) === 0) {\n              unset(components, [component, groupType.path])\n            }\n          }\n        })\n      }\n    })\n\n    // TODO: Need to think about this more\n    // if (has(components, [component, path, name])) {\n    //   throw new Error(`Duplicate ${type}: \"${name}\"`)\n    // }\n\n    set(components, [component, path, name], assign({\n      label: label,\n    }, replacement))\n  }\n\n  const addNested = (name, configs) => {\n    return walkConfigs(configs, (key, config) => {\n\n      if (config.visibleIf) {\n        config.visibleIf = `${name}.${config.visibleIf}`\n      }\n\n      config.longLabel = `${startCase(name)} ⇢ ${config.longLabel ? config.longLabel : (config.label ? config.label : startCase(key))}`\n\n      return {\n        key: `${name}.${key}`,\n        config,\n      }\n    })\n  }\n\n  const addGroup = (name, label, configs, nesting = true, type = `group`, callback = null) => {\n\n    setComponentGroup(name, label, configs, type)\n\n    return walkConfigs(configs, (key, config) => {\n      config.group = config.group ? `${name}.${config.group}` : name\n\n      if (callback) {\n        callback(key, config)\n      }\n\n      return {\n        key: nesting ? `${name}.${key}` : key,\n        config,\n      }\n    })\n  }\n\n  const addFeature = (name, label, configs, enabled = false, nesting = true) => {\n\n    if (has(configs, `enabled`)) {\n      throw new Error(`Feature \"${name}\" should not contain a property named \"enabled\".`)\n    }\n\n    configs = assign({\n      enabled: standardizeConfig(`enabled`, enabled),\n    }, configs)\n\n    configs = addGroup(name, label, configs, nesting, `group`, (key, config) => {\n      if (key !== `enabled`) {\n        config.visibleIf = `${name}.enabled`\n      }\n    })\n\n    return configs\n  }\n\n  const addField = (key, callback = null) => {\n\n    let fields: Configs = {}\n\n    const visibleIf = `${key}.isVisible`\n\n    const prettyKey = startCase(key)\n\n    fields.isVisible = {\n      default: true,\n      label: `Visible`,\n      longLabel: `${prettyKey} ⇢ Visible`,\n      styleClasses: `col-md-2`,\n    }\n\n    fields.required = {\n      default: false,\n      label: `Required`,\n      longLabel: `${prettyKey} ⇢ Required`,\n      visibleIf: visibleIf,\n      styleClasses: `col-md-2`,\n    }\n\n    fields.disabled = {\n      default: false,\n      label: `Disabled`,\n      longLabel: `${prettyKey} ⇢ Disabled`,\n      visibleIf: visibleIf,\n      styleClasses: `col-md-2`,\n    }\n\n    fields.readonly = {\n      default: false,\n      label: `Readonly`,\n      longLabel: `${prettyKey} ⇢ Readonly`,\n      visibleIf: visibleIf,\n      styleClasses: `col-md-2`,\n    }\n\n    fields.hasAutoFocus = {\n      default: false,\n      label: `Autofocus`,\n      longLabel: `${prettyKey} ⇢ Autofocus`,\n      visibleIf: visibleIf,\n      styleClasses: `col-md-2`,\n    }\n\n    fields.pattern = {\n      default: ``,\n      label: `Pattern`,\n      longLabel: `${prettyKey} ⇢ Pattern`,\n      visibleIf: visibleIf,\n      styleClasses: `col-md-12`,\n    }\n\n    if (callback) {\n\n      const insert = (key, config) => {\n\n        if (has(fields, key)) {\n          throw new Error(`Field ${key} already exists!`)\n        }\n\n        const parsedConfig = parseConfig(key, config, {\n          visibleIf: visibleIf,\n          styleClasses: `col-md-12`,\n        })\n\n        parsedConfig.longLabel = `${prettyKey} ⇢ ${parsedConfig.label}`\n\n        fields[key] = parsedConfig\n      }\n\n      const modify = (key, config) => {\n        merge(fields[key], standardizeConfig(key, config, true))\n      }\n\n      callback({\n        insert,\n        modify,\n      })\n    }\n\n    return addGroup(key, startCase(key), fields, true)\n  }\n\n  const addTab = (label, configs) => {\n\n    const name = kebabCase(label)\n\n    return addGroup(name, label, configs, false, `tab`)\n  }\n\n  return {\n    addNested,\n    addFeature,\n    addGroup,\n    addTab,\n    addField,\n  }\n}\n\nconst parseConfigsAndComponents = definitions => {\n\n  const configs = {}\n  const components = parseComponents(definitions)\n\n  each(definitions, (component, key) => {\n\n    const {\n      getConfigs,\n      getSettings,\n      getTranslations,\n      getUI,\n    } = component\n\n    const options = {\n      component: key,\n    }\n\n    const helpers = getHelpers(components, key)\n\n    if (getConfigs) {\n      parseConfigsIntoCollection(configs, getConfigs(helpers), options)\n    } else {\n\n      if (getSettings) {\n        parseConfigsIntoCollection(configs, getSettings(helpers), assign(options, {\n          category: `setting`,\n        }))\n      }\n\n      if (getTranslations) {\n        parseConfigsIntoCollection(configs, getTranslations(helpers), assign(options, {\n          category: `translation`,\n        }))\n      }\n\n      if (getUI) {\n        parseConfigsIntoCollection(configs, getUI(helpers), assign(options, {\n          category: `ui`,\n        }))\n      }\n    }\n  })\n\n  return {\n    configs,\n    components,\n  }\n}\n\nconst parseComponent = (key, component = null) => {\n  return assign({\n    label: startCase(last(split(key, `.`))),\n    order: 0,\n    toggleable: false,\n    description: null,\n    rootKey: null,\n  }, component)\n}\n\nconst parseComponents = components => {\n  return mapValues(components, (component, key) => {\n    const { getOptions } = component\n\n    return parseComponent(key, getOptions ? getOptions() : null)\n  })\n}\n\nconst parseComponentsFromConfigs = (configs, structure = {}) => {\n\n  // TODO: Place all these types in the \"types\" directory\n  const components: { [key: string]: object } = {}\n\n  let hasUnsorted = false\n\n  each(configs, config => {\n    if (has(config, `component`)) {\n      if (!has(components, config.component)) {\n\n        let options = {}\n        if (has(structure, config.component)) {\n\n          const { getOptions } = structure[config.component]\n          options = getOptions ? getOptions() : structure[config.component]\n        }\n\n        components[config.component] = parseComponent(config.component, options)\n      }\n    } else {\n      hasUnsorted = true\n    }\n  })\n\n  if (hasUnsorted && size(components)) {\n    components.unsorted = parseComponent(`unsorted`, {\n      order: 999,\n    })\n  }\n\n  return components\n}\n\nconst parseSource = async ({ getComponents, getConfigs, getLabel, getName, source }) => {\n\n  const name = getName ? getName() : source\n  const label = getLabel ? getLabel() : startCase(name)\n\n  const options = {\n    name,\n    label,\n  }\n\n  const grabComponents = getComponents ? await getComponents() : null\n\n  if (getConfigs) {\n    const configs = parseConfigs(await getConfigs())\n    const components = parseComponentsFromConfigs(configs, grabComponents)\n    merge(options, {\n      configs,\n      components,\n    })\n  } else {\n    const { components, configs } = parseConfigsAndComponents(grabComponents)\n    merge(options, {\n      configs,\n      components,\n    })\n  }\n\n  return options\n}\n\n// This should be renamed parseSections (assuming we still need it)\n// const parseConfigs = (source: string, sections) => {\n\n//   const configs: Configs = {}\n\n//   const configKeys = []\n\n//   each(sections, (section, sectionKey) => {\n//     each(section.configs, (config: Config, key: string) => {\n\n//       const finalKey = config.key || key\n//       const finalSection = section.section || sectionKey\n//       const finalCategory = section.category || `setting`\n\n//       if (includes(configKeys, finalKey)) {\n//         throw new Error(`Source \"${source}\" has config with duplicate key \"${finalKey}\". No duplicate keys allowed.`)\n//       } else {\n//         configKeys.push(finalKey)\n//       }\n\n//       const configObj = {\n//         default: null,\n//         type: `input`,\n//         label: startCase(last(split(finalKey, `.`))),\n//         reference: finalKey,\n//         section: finalSection,\n//         category: finalCategory,\n//       }\n\n//       config = assign(configObj, config)\n\n//       configs[finalKey] = config\n//     })\n//   })\n\n//   return configs\n// }\n\nconst getMockResponse = (configs, options = null) => {\n\n  options = assign({\n    nested: false,\n  }, options)\n\n  const data = {}\n\n  each(configs, (config, key) => {\n    data[key] = config.default\n  })\n\n  if (options.nested) {\n    return convertToNested(data)\n  }\n\n  return data\n}\n\nclass SourceError extends Error {\n\n  constructor(source, error) {\n    super(`${error.message} (\"${source}\" source)`)\n    this.name = `SourceError`\n  }\n}\n\nexport { getMockResponse, parseSource, SourceError }\n"],"names":["each","setWith","lodash","convertToNested","object","nested","value","key","Object","assign","get","has","isObject","kebabCase","last","mapKeys","mapValues","merge","set","size","split","startCase","unset","getType","config","default","standardizeConfig","skipDefaultCheck","Error","parseConfig","options","docLink","docLinkText","hint","type","label","category","parseConfigs","configs","callback","parseConfigsIntoCollection","parseUniqueConfigs","parseComponent","component","order","toggleable","description","rootKey","parseSource","async","getComponents","getConfigs","getLabel","getName","source","name","grabComponents","components","structure","hasUnsorted","getOptions","unsorted","parseComponentsFromConfigs","definitions","parseComponents","getSettings","getTranslations","getUI","helpers","groupTypes","group","path","tab","walkConfigs","walked","newConfig","newKey","addGroup","nesting","replacement","groupExpanded","groupType","holder","setComponentGroup","addNested","visibleIf","longLabel","addFeature","enabled","addTab","addField","fields","prettyKey","isVisible","styleClasses","required","disabled","readonly","hasAutoFocus","pattern","insert","parsedConfig","modify","getHelpers","parseConfigsAndComponents","getMockResponse","data","SourceError","constructor","error","super","message","this"],"mappings":"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"}