{"version":3,"file":"index.umd.js","sources":["../src/constants/CATEGORIES.ts","../src/fetchConfigs/transformationOptions.ts","../src/fetchConfigs/transformToNested.ts","../src/fetchConfigs/transformResponse.ts","../src/fetchConfigs/transformToConfigValues.ts","../src/createConfigsFromJson.ts","../src/parseSource/parseSource.ts","../src/parseSource/parseSourceConfigs.ts"],"sourcesContent":["/* eslint-disable no-unused-vars */\nexport enum ConfigCategory {\n  Setting = `setting`,\n  Translation = `translation`,\n  UI = `ui`,\n  Feature = `feature`\n}\n\nexport enum ConfigCategoryPlurals {\n  Setting = `settings`,\n  Translation = `translations`,\n  UI = `ui`,\n  Feature = `features`\n}\n\n/* eslint-enable: no-unused-vars */\nconst CATEGORIES = {\n  [ConfigCategory.Setting]: {\n    plural: ConfigCategoryPlurals.Setting,\n    label: `Setting`,\n    labelPlural: `Settings`,\n    order: 1,\n  },\n  [ConfigCategory.Translation]: {\n    plural: ConfigCategoryPlurals.Translation,\n    label: `Translation`,\n    labelPlural: `Translations`,\n    order: 2,\n  },\n  [ConfigCategory.UI]: {\n    plural: ConfigCategoryPlurals.UI,\n    label: `UI`,\n    labelPlural: `UI`,\n    order: 3,\n  },\n  [ConfigCategory.Feature]: {\n    plural: ConfigCategoryPlurals.Feature,\n    label: `Feature`,\n    labelPlural: `Features`,\n    order: 4,\n  },\n}\n\nexport { CATEGORIES }\n","import lodash from 'lodash'\n\nconst { assign, mapValues } = lodash\n\nexport type TransformationOptions = {\n  nested: boolean,\n  categorized: boolean,\n}\n\nconst getTransformationOptions = (options: Partial<TransformationOptions> = {}): TransformationOptions => {\n\n  options = mapValues(options, () => true)\n\n  const opts: TransformationOptions = {\n    nested: false,\n    categorized: false,\n  }\n\n  return assign(opts, options)\n}\n\nexport { getTransformationOptions }\n","import lodash from 'lodash'\n\nconst { each, setWith } = lodash\n\nconst transformToNested = object => {\n\n  const transformed = {}\n\n  each(object, (value, key) => {\n    setWith(transformed, key, value, Object)\n  })\n\n  return transformed\n}\n\nexport { transformToNested }\n","import lodash from 'lodash'\n\nimport { CATEGORIES } from '../constants'\nimport { getTransformationOptions } from './transformationOptions'\nimport { transformToNested } from './transformToNested'\n\nconst { each, get } = lodash\n\nconst helpTransformResponse = (response, callback = null) => {\n\n  const transformed = {}\n\n  each(response, (value, key) => {\n\n    if (callback) {\n\n      const {\n        key: newKey,\n        value: newValue,\n      } = callback(key, value)\n\n      if (newKey) {\n        key = newKey\n      }\n\n      if (newValue) {\n        value = newValue\n      }\n    }\n\n    transformed[key] = value\n  })\n\n  return transformed\n}\n\nconst transformResponse = (response, opts = {}, configs = null) => {\n\n  const options = getTransformationOptions(opts)\n\n  const transformed = helpTransformResponse(response, key => {\n\n    if (options.categorized) {\n\n      const config = get(configs, key)\n\n      if (config) {\n        key = `${CATEGORIES[config.category].plural}.${key}`\n      }\n    }\n\n    return {\n      key,\n    }\n  })\n\n  if (options.nested) {\n    return transformToNested(transformed)\n  }\n\n  return transformed\n}\n\nexport { transformResponse }\n","import lodash from 'lodash'\n\nimport { CATEGORIES } from '../constants'\nimport { getTransformationOptions } from './transformationOptions'\nimport { transformToNested } from './transformToNested'\n\nconst { each, has } = lodash\n\nconst transformFromConfigsToResponse = (configs, callback = null) => {\n\n  const response = {}\n\n  each(configs, (config, key) => {\n\n    let value = has(config, `value`) ? config.value : config.default\n\n    if (callback) {\n\n      const {\n        key: newKey,\n        value: newValue,\n      } = callback(key, config)\n\n      if (newKey) {\n        key = newKey\n      }\n\n      if (newValue) {\n        value = newValue\n      }\n    }\n\n    response[key] = value\n  })\n\n  return response\n}\n\nconst transformToConfigValues = (configs, opts = {}) => {\n\n  const options = getTransformationOptions(opts)\n\n  const response = transformFromConfigsToResponse(configs, (key, config) => {\n\n    key = options.categorized ? `${CATEGORIES[config.category].plural}.${key}` : key\n\n    return {\n      key,\n    }\n  })\n\n  if (options.nested) {\n    return transformToNested(response)\n  }\n\n  return response\n}\n\nexport { transformToConfigValues }\n","import lodash from 'lodash'\n\nimport type {\n  Config,\n  StandardizedConfigs,\n} from './types'\n\nconst { each, isBoolean, isObject, last, split, startsWith, trimEnd } = lodash\n\n/**\n * TODO: This function doesn't know how to handle configs with an empty array value (preSelectedNewsletters) and the config will just be ignored\n */\nconst flattenJsonObject = (object: object, initialPathPrefix: string = ``) => {\n\n  function flatten(object, initialPathPrefix) {\n    if (!object || typeof object !== `object`) {\n      return [{ [initialPathPrefix]: object }]\n    }\n\n    const prefix = initialPathPrefix\n      ? Array.isArray(object)\n        ? initialPathPrefix\n        : `${initialPathPrefix}.`\n      : ``\n\n    return Object.keys(object)\n      .flatMap((key) =>\n        flatten(\n          object[key],\n          Array.isArray(object) ? `${prefix}[${key}]` : `${prefix}${key}`,\n        ),\n      )\n      .reduce((acc, path) => ({ ...acc, ...path }), [])\n  }\n\n  const flattenedObject = flatten(object, initialPathPrefix)\n\n  const configs = {}\n  each(flattenedObject, (value, key) => {\n    const splitKey = split(key, `.`)\n    const lastPart = last(splitKey)\n    if (startsWith(lastPart, `#`)) {\n      if (lastPart === `#value`) {\n        configs[trimEnd(key, `.#value`)] = value\n      }\n    } else {\n      configs[key] = value\n    }\n  })\n\n  return configs\n}\n\nconst createConfigsFromJson = (json: object): StandardizedConfigs => {\n\n  const configs = {}\n\n  const flattenJson = flattenJsonObject(json)\n\n  each(flattenJson, (value, key) => {\n\n    let defaultValue = value\n    if (isObject(value)) {\n      defaultValue = value[`#value`]\n    }\n\n    const config: Config = {\n      default: defaultValue,\n    }\n\n    if (isBoolean(defaultValue)) {\n      config.type = `switch`\n    }\n\n    configs[key] = config\n  })\n\n  return configs\n}\n\nexport { createConfigsFromJson }\n","import lodash from 'lodash'\n\nimport type { Component, ComponentOptions, Components, Config, ConfigObject, Configs, Onboarder, Onboarders, OnboarderTabs, Source, StandardizedConfigs } from '../types'\n\nconst { assign, each, get, has, includes, isObject, kebabCase, last, mapKeys, mapValues, merge, set, size, split, startCase, unset } = lodash\n\nexport type SourceConfigs = {\n  getComponents?: () => Promise<Components>,\n  getOnboarders?: () => Promise<Onboarder>,\n  getConfigs?: () => Promise<Configs>,\n  getLabel?: () => string | Promise<string | undefined>,\n  getName?: () => string | Promise<string | undefined>,\n  source?: string\n}\n\n// TODO: HelperFunctions is deprecated\nexport type HelperFunctions = ReturnType<typeof getHelpers>\nexport type Context = ReturnType<typeof getHelpers>\n\nexport type Definitions = {\n  [key: string]: DefinitionComponent\n}\n\n/* eslint-disable no-unused-vars */\nexport type DefinitionComponent = {\n  getConfigs?: (_: HelperFunctions) => Configs\n  getSettings?: (_: HelperFunctions) => Configs\n  getTranslations?: (_: HelperFunctions) => Configs\n  getUI?: (_: HelperFunctions) => Configs,\n  getFeatures?: (_: HelperFunctions) => Configs,\n  getOptions?: () => Component\n}\n\n/* eslint-enable no-unused-vars */\n\nconst getType = (config: Config) => {\n  if (typeof config === `object`) {\n    switch (typeof config.default) {\n      case `boolean`:\n        return `switch`\n    }\n  }\n\n  return `input`\n}\n\nconst standardizeConfig = (key: string, config: Config, skipDefaultCheck = false) => {\n\n  if (isObject(config)) {\n    if (!skipDefaultCheck && !has(config, `default`)) {\n      throw new Error(`Config \"${key}\" is missing a \"default\" value.`)\n    }\n  } else {\n    config = {\n      default: config,\n    }\n  }\n\n  return config as ConfigObject\n}\n\nconst parseConfig = (key: string, config: Config, options: Partial<ConfigObject> = {}) => {\n\n  config = standardizeConfig(key, config)\n\n  delete config.key\n\n  if (config.docLink) {\n    const docLinkText = `Documentation on this feature can be found <a href=\"${config.docLink}\">here</a>.`\n    config.hint = config.hint ? docLinkText + `<br>${config.hint}` : docLinkText\n    delete config.docLink\n  }\n\n  return assign({\n    default: null, // This is placed here so that `default` appears as first property\n    type: getType(config),\n    label: startCase(last(split(key, `.`))),\n    category: `setting`,\n  } as ConfigObject, config, options) as ConfigObject\n}\n\nconst parseConfigs = (\n  configs: Configs,\n  options: Partial<ConfigObject> = {},\n  // eslint-disable-next-line no-unused-vars\n  callback?: (key: string, config: Config) => void,\n) => {\n\n  configs = mapKeys(configs, (config: Config, key: string) => {\n    return lodash.get(config, `key`, key)\n  })\n\n  return mapValues(configs, (config: Config, key: string) => {\n\n    callback && callback(key, config)\n\n    return parseConfig(key, config, options)\n  }) as StandardizedConfigs\n}\n\nconst parseUniqueConfigs = (set: Configs, configs: Configs, options: Partial<ConfigObject>) => {\n  return parseConfigs(configs, options, (key) => {\n    if (has(set, key)) {\n      throw new Error(`Duplicate key: \"${key}\"`)\n    }\n  })\n}\n\nconst parseConfigsIntoCollection = (set: Configs, configs: Configs, options: Partial<ComponentOptions>) => {\n  merge(set, parseUniqueConfigs(set, configs, options))\n}\n\nconst getHelpers = (components: Components, component: string, helperType: string = `setting`) => {\n\n  const groupTypes = {\n    group: {\n      path: `groups`,\n    },\n    tab: {\n      path: `tabs`,\n    },\n  }\n\n  const trackedGroups = []\n\n  const walkConfigs = (configs: Configs, callback = null) => {\n\n    const walked = {}\n\n    each(configs, (config, key) => {\n      config = standardizeConfig(key, config)\n      if (callback) {\n        const {\n          config: newConfig,\n          key: newKey,\n        } = callback(key, config)\n        walked[newKey] = newConfig\n      } else {\n        walked[key] = config\n      }\n    })\n\n    return walked\n  }\n\n  const setComponentGroup = (name: string, label: string, configs: Configs, type = `group`) => {\n\n    let path: string = groupTypes[type].path\n    let replacement: ComponentOptions = {}\n\n    each(configs, config => {\n      if (typeof config === `object` && config.group) {\n\n        // TODO: This variable should handle cases where group value is deeply nested\n        const groupExpanded = config.group\n\n        each(groupTypes, groupType => {\n          const group = get(components, [component, groupType.path, groupExpanded])\n          if (group) {\n            set(replacement, [groupType.path, groupExpanded], group)\n            unset(components, [component, groupType.path, groupExpanded])\n\n            const holder = get(components, [component, groupType.path], {})\n            if (size(holder) === 0) {\n              unset(components, [component, groupType.path])\n            }\n          }\n        })\n      }\n    })\n\n    // TODO: Need to think about this more\n    // if (has(components, [component, path, name])) {\n    //   throw new Error(`Duplicate ${type}: \"${name}\"`)\n    // }\n\n    set(components, [component, path, name], assign({\n      label: label,\n    }, replacement))\n  }\n\n  const addNested = (name: string, configs: Configs) => {\n    return walkConfigs(configs, (key: string, config: Config) => {\n\n      if (typeof config === `object`) {\n        if (config.visibleIf) {\n          config.visibleIf = `${name}.${config.visibleIf}`\n        }\n\n        config.longLabel = `${startCase(name)} ⇢ ${config.longLabel ? config.longLabel : (config.label ? config.label : startCase(key))}`\n      }\n\n      return {\n        key: `${name}.${key}`,\n        config,\n      }\n    })\n  }\n\n  const addGroup = (\n    name: string,\n    label: string,\n    configs: Configs,\n    nesting = true,\n    type = `group`,\n    /* eslint-disable-next-line no-unused-vars */\n    callback?: (_: string, _2: Config) => void,\n  ) => {\n\n    // TODO: Eventually store a running list of problems so you can see a count of the issues\n    if (includes(trackedGroups, name)) {\n      console.warn(`\"${name}\" group already exists in \"${helperType}\"`)\n    } else {\n      trackedGroups.push(name)\n    }\n\n    setComponentGroup(name, label, configs, type)\n\n    return walkConfigs(configs, (key: string, config: ConfigObject) => {\n      config.group = config.group ? `${name}.${config.group}` : name\n\n      if (callback) {\n        callback(key, config)\n      }\n\n      return {\n        key: nesting ? `${name}.${key}` : key,\n        config,\n      }\n    })\n  }\n\n  const addFeature = (name: string, label: string, configs: Configs, enabled = false, nesting = true) => {\n\n    if (has(configs, `enabled`)) {\n      throw new Error(`Feature \"${name}\" should not contain a property named \"enabled\".`)\n    }\n\n    configs = assign({\n      enabled: standardizeConfig(`enabled`, enabled),\n    }, configs)\n\n    configs = addGroup(name, label, configs, nesting, `group`, (key, config) => {\n      if (key !== `enabled`) {\n        typeof config === `object` && lodash.set(config, `visibleIf`, `${name}.enabled`)\n      }\n    })\n\n    return configs as StandardizedConfigs\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  type AddFieldCallbackInnerFuncType = (key: string, config: Config) => void\n  // eslint-disable-next-line no-unused-vars\n  type ModifyLabelCallbackInnerFuncType = (key: string) => void\n\n  const addField = (\n    key: string,\n    // eslint-disable-next-line no-unused-vars\n    callback?: (arg: {\n      insert: AddFieldCallbackInnerFuncType,\n      modify: AddFieldCallbackInnerFuncType,\n      modifyLabel: ModifyLabelCallbackInnerFuncType,\n    }) => void,\n  ) => {\n\n    let fields: Configs = {}\n\n    const visibleIf = `${key}.isVisible`\n\n    const prettyKey = startCase(key)\n\n    let label = prettyKey\n\n    fields.isVisible = {\n      default: true,\n      label: `Visible`,\n      longLabel: `${prettyKey} ⇢ Visible`,\n      styleClasses: `col-md-2`,\n    }\n\n    fields.required = {\n      default: false,\n      label: `Required`,\n      longLabel: `${prettyKey} ⇢ Required`,\n      visibleIf: visibleIf,\n      styleClasses: `col-md-2`,\n    }\n\n    fields.disabled = {\n      default: false,\n      label: `Disabled`,\n      longLabel: `${prettyKey} ⇢ Disabled`,\n      visibleIf: visibleIf,\n      styleClasses: `col-md-2`,\n    }\n\n    fields.readonly = {\n      default: false,\n      label: `Readonly`,\n      longLabel: `${prettyKey} ⇢ Readonly`,\n      visibleIf: visibleIf,\n      styleClasses: `col-md-2`,\n    }\n\n    fields.hasAutoFocus = {\n      default: false,\n      label: `Autofocus`,\n      longLabel: `${prettyKey} ⇢ Autofocus`,\n      visibleIf: visibleIf,\n      styleClasses: `col-md-2`,\n    }\n\n    fields.pattern = {\n      default: ``,\n      label: `Pattern`,\n      longLabel: `${prettyKey} ⇢ Pattern`,\n      visibleIf: visibleIf,\n      styleClasses: `col-md-12`,\n    }\n\n    if (callback) {\n\n      const insert: AddFieldCallbackInnerFuncType = (key, config) => {\n\n        if (has(fields, key)) {\n          throw new Error(`Field ${key} already exists!`)\n        }\n\n        const parsedConfig = parseConfig(key, config, {\n          visibleIf: visibleIf,\n          styleClasses: `col-md-12`,\n        })\n\n        parsedConfig.longLabel = `${prettyKey} ⇢ ${parsedConfig.label}`\n\n        fields[key] = parsedConfig\n      }\n\n      const modify: AddFieldCallbackInnerFuncType = (key, config) => {\n        merge(fields[key], standardizeConfig(key, config, true))\n      }\n\n      const modifyLabel: ModifyLabelCallbackInnerFuncType = newLabel => {\n        label = newLabel\n      }\n\n      callback && callback({\n        insert,\n        modify,\n        modifyLabel,\n      })\n    }\n\n    return addGroup(key, label, fields, true)\n  }\n\n  const addTab = (label: string, configs: Configs) => {\n\n    const name = `${helperType}-${kebabCase(label)}`\n\n    return addGroup(name, label, configs, false, `tab`)\n  }\n\n  return {\n    addNested,\n    addFeature,\n    addGroup,\n    addTab,\n    addField,\n  }\n}\n\nconst parseConfigsAndComponents = (definitions: Definitions) => {\n\n  const configs: Configs = {}\n  const components = parseComponents(definitions)\n\n  each(definitions, (component, key) => {\n\n    const helpParseConfigsWithCategory = (getCategoryFunction, category = `setting`) => {\n\n      let options: Partial<ConfigObject> = {\n        component: key,\n      }\n\n      const helpers = getHelpers(components, key, category)\n\n      if (category) {\n        options = assign(options, {\n          category: category,\n        })\n      }\n\n      const theseConfigs = getCategoryFunction(helpers)\n      if (size(theseConfigs)) {\n\n        const categories = get(components, [key, `categories`], [])\n        categories.push(category)\n        set(components, [key, `categories`], categories)\n\n        parseConfigsIntoCollection(configs, theseConfigs, options)\n      }\n    }\n\n    const {\n      getConfigs,\n      getFeatures,\n      getSettings,\n      getTranslations,\n      getUI,\n    } = component\n\n    if (getConfigs) {\n      helpParseConfigsWithCategory(getConfigs)\n    } else {\n\n      if (getSettings) {\n        helpParseConfigsWithCategory(getSettings, `setting`)\n      }\n\n      if (getTranslations) {\n        helpParseConfigsWithCategory(getTranslations, `translation`)\n      }\n\n      if (getUI) {\n        helpParseConfigsWithCategory(getUI, `ui`)\n      }\n\n      if (getFeatures) {\n        helpParseConfigsWithCategory(getFeatures, `feature`)\n      }\n    }\n  })\n\n  return {\n    configs,\n    components,\n  }\n}\n\nconst parseComponent = (key: string, component?: ComponentOptions) => {\n  return assign({\n    label: startCase(last(split(key, `.`))),\n    order: 0,\n    toggleable: false,\n    description: null,\n    rootKey: null,\n  }, component) as ComponentOptions\n}\n\nconst parseComponents = (components: Components) => {\n  return mapValues(components, (component, key: string) => {\n    const { getOptions } = component\n\n    return parseComponent(key, getOptions ? getOptions() : null)\n  }) as Components\n}\n\nconst parseComponentsFromConfigs = (configs: Configs, structure: Components = {}) => {\n\n  // TODO: Place all these types in the \"types\" directory\n  const components: Components = {}\n\n  let hasUnsorted = false\n\n  each(configs, config => {\n    if (typeof config === `object` && has(config, `component`)) {\n      if (!has(components, config.component)) {\n\n        let options = {}\n        if (has(structure, config.component)) {\n          const { getOptions } = structure[config.component]\n          options = getOptions ? getOptions() : structure[config.component]\n        }\n\n        components[config.component] = parseComponent(config.component, options)\n      }\n    } else {\n      hasUnsorted = true\n    }\n  })\n\n  if (hasUnsorted && size(components)) {\n    components.unsorted = parseComponent(`unsorted`, {\n      order: 999,\n    })\n  }\n\n  return components\n}\n\nconst standardizeConfigs = (configs: Configs, sourceConfigs): StandardizedConfigs => {\n\n  const standardizedConfigs = {}\n\n  each(configs, config => {\n\n    if (isObject(config) && !has(config, `key`)) {\n      throw new Error(`Onboarder config missing key!`)\n    }\n\n    const key: any = isObject(config) ? config.key : config\n\n    if (!has(sourceConfigs, key)) {\n      throw new Error(`Onboarder defines key \"${key}\" which does not exist.`)\n    }\n\n    if (isObject(config)) {\n      standardizedConfigs[key] = assign({}, sourceConfigs[key], config)\n    } else {\n      standardizedConfigs[key] = assign({}, sourceConfigs[key])\n    }\n  })\n\n  return standardizedConfigs\n}\n\nconst parseOnboarderTabs = (tabs, configs): OnboarderTabs => {\n\n  const parsedOnboardersTabs = {}\n\n  each(tabs, (tab, name) => {\n\n    parsedOnboardersTabs[name] = {\n      label: tab.label ? tab.label : startCase(name),\n      configs: standardizeConfigs(tab.configs, configs),\n    }\n  })\n\n  return parsedOnboardersTabs\n}\n\nconst parseOnboarders = (onboarders, configs): Onboarders => {\n\n  const parsedOnboarders = {}\n\n  each(onboarders, ({ getLabel, getTabs }, name) => {\n\n    parsedOnboarders[name] = {\n      label: getLabel ? getLabel() : startCase(name),\n      tabs: getTabs ? parseOnboarderTabs(getTabs(), configs) : {},\n    }\n  })\n\n  return parsedOnboarders\n}\n\nconst parseSource = async ({ getComponents, getConfigs, getLabel, getName, getOnboarders, source }: SourceConfigs) => {\n\n  const name = getName ? await getName() : source\n  const label = getLabel ? await getLabel() : startCase(name)\n\n  const options: Source = {\n    name,\n    label,\n  }\n\n  const grabComponents = getComponents ? await getComponents() : null\n\n  if (getConfigs) {\n    const configs = parseConfigs(await getConfigs())\n    const components = parseComponentsFromConfigs(configs, grabComponents)\n    merge(options, {\n      configs,\n      components,\n    })\n  } else {\n    let { components, configs } = parseConfigsAndComponents(grabComponents)\n    merge(options, {\n      configs,\n      components,\n    })\n  }\n\n  if (getOnboarders) {\n    options.onboarders = parseOnboarders(await getOnboarders(), options.configs)\n  }\n\n  return options\n}\n\nclass SourceError extends Error {\n\n  constructor(source, error) {\n    super(`${error.message} (\"${source}\" source)`)\n    this.name = `SourceError`\n  }\n}\n\nexport { parseSource, SourceError }\n","import { parseSource, SourceConfigs } from './parseSource'\n\nconst parseSourceConfigs = async (source: string, stack: SourceConfigs) => {\n\n  const parsedSource = await parseSource({\n    source,\n    ...stack,\n  })\n\n  return parsedSource.configs\n}\n\nexport { parseSourceConfigs }\n"],"names":["_CATEGORIES","ConfigCategory","ConfigCategoryPlurals","CATEGORIES","Setting","plural","label","labelPlural","order","Translation","UI","Feature","assign","lodash","mapValues","getTransformationOptions","options","nested","categorized","each","setWith","transformToNested","object","transformed","value","key","Object","get","has","isBoolean","isObject","last","split","startsWith","trimEnd","includes","kebabCase","mapKeys","merge","set","size","startCase","unset","getType","config","standardizeConfig","skipDefaultCheck","Error","default","parseConfig","docLink","hint","docLinkText","type","category","parseConfigs","configs","callback","parseComponent","component","toggleable","description","rootKey","standardizeConfigs","sourceConfigs","standardizedConfigs","parseOnboarderTabs","tabs","parsedOnboardersTabs","tab","name","parseSource","_ref2","getComponents","getConfigs","getLabel","getName","getOnboarders","source","_temp7","grabComponents","Promise","resolve","parsedOnboarders","onboarders","_getOnboarders","_ref","getTabs","_temp","then","_getConfigs","components","structure","hasUnsorted","getOptions","unsorted","parseComponentsFromConfigs","definitions","parseConfigsAndComponents","parseComponents","getCategoryFunction","helpers","helperType","group","path","walkConfigs","walked","addGroup","nesting","trackedGroups","console","warn","push","groupTypes","replacement","groupExpanded","groupType","holder","setComponentGroup","addNested","visibleIf","longLabel","addFeature","enabled","addTab","addField","fields","prettyKey","isVisible","styleClasses","required","disabled","readonly","hasAutoFocus","pattern","insert","parsedConfig","modify","modifyLabel","newLabel","getHelpers","theseConfigs","categories","parseUniqueConfigs","parseConfigsIntoCollection","getFeatures","getSettings","getTranslations","getUI","helpParseConfigsWithCategory","_temp2","_temp3","_temp4","e","reject","SourceError","error","_this","_Error","call","this","message","json","flattenJson","initialPathPrefix","flattenedObject","flatten","prefix","Array","isArray","keys","flatMap","reduce","acc","_extends","splitKey","lastPart","flattenJsonObject","defaultValue","stack","parsedSource","response","opts","newKey","newValue","helpTransformResponse","_callback","transformFromConfigsToResponse"],"mappings":"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"}