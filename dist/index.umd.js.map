{"version":3,"file":"index.umd.js","sources":["../src/constants/CATEGORIES.ts","../src/fetchConfigs/transformationOptions.ts","../src/fetchConfigs/transformToNested.ts","../src/fetchConfigs/transformResponse.ts","../src/fetchConfigs/transformToConfigValues.ts","../src/createConfigsFromJson.ts","../src/parseSource/parseSource.ts","../src/parseSource/parseSourceConfigs.ts"],"sourcesContent":["/* eslint-disable no-unused-vars */\nexport enum ConfigCategory {\n  Setting = `setting`,\n  Translation = `translation`,\n  UI = `ui`,\n  Feature = `feature`\n}\n\nexport enum ConfigCategoryPlurals {\n  Setting = `settings`,\n  Translation = `translations`,\n  UI = `ui`,\n  Feature = `features`\n}\n\n/* eslint-enable: no-unused-vars */\nconst CATEGORIES = {\n  [ConfigCategory.Setting]: {\n    plural: ConfigCategoryPlurals.Setting,\n    label: `Setting`,\n    labelPlural: `Settings`,\n    order: 1,\n  },\n  [ConfigCategory.Translation]: {\n    plural: ConfigCategoryPlurals.Translation,\n    label: `Translation`,\n    labelPlural: `Translations`,\n    order: 2,\n  },\n  [ConfigCategory.UI]: {\n    plural: ConfigCategoryPlurals.UI,\n    label: `UI`,\n    labelPlural: `UI`,\n    order: 3,\n  },\n  [ConfigCategory.Feature]: {\n    plural: ConfigCategoryPlurals.Feature,\n    label: `Feature`,\n    labelPlural: `Features`,\n    order: 4,\n  },\n}\n\nexport { CATEGORIES }\n","import lodash from 'lodash'\n\nconst { assign, mapValues } = lodash\n\nexport type TransformationOptions = {\n  nested: boolean,\n  categorized: boolean,\n}\n\nconst getTransformationOptions = (options: Partial<TransformationOptions> = {}): TransformationOptions => {\n\n  options = mapValues(options, () => true)\n\n  const opts: TransformationOptions = {\n    nested: false,\n    categorized: false,\n  }\n\n  return assign(opts, options)\n}\n\nexport { getTransformationOptions }\n","import lodash from 'lodash'\n\nconst { each, setWith } = lodash\n\nconst transformToNested = object => {\n\n  const transformed = {}\n\n  each(object, (value, key) => {\n    setWith(transformed, key, value, Object)\n  })\n\n  return transformed\n}\n\nexport { transformToNested }\n","import lodash from 'lodash'\n\nimport { CATEGORIES } from '../constants'\nimport { getTransformationOptions } from './transformationOptions'\nimport { transformToNested } from './transformToNested'\n\nconst { each, get } = lodash\n\nconst helpTransformResponse = (response, callback = null) => {\n\n  const transformed = {}\n\n  each(response, (value, key) => {\n\n    if (callback) {\n\n      const {\n        key: newKey,\n        value: newValue,\n      } = callback(key, value)\n\n      if (newKey) {\n        key = newKey\n      }\n\n      if (newValue) {\n        value = newValue\n      }\n    }\n\n    transformed[key] = value\n  })\n\n  return transformed\n}\n\nconst transformResponse = (response, opts = {}, configs = null) => {\n\n  const options = getTransformationOptions(opts)\n\n  const transformed = helpTransformResponse(response, key => {\n\n    if (options.categorized) {\n\n      const config = get(configs, key)\n\n      if (config) {\n        key = `${CATEGORIES[config.category].plural}.${key}`\n      }\n    }\n\n    return {\n      key,\n    }\n  })\n\n  if (options.nested) {\n    return transformToNested(transformed)\n  }\n\n  return transformed\n}\n\nexport { transformResponse }\n","import lodash from 'lodash'\n\nimport { CATEGORIES } from '../constants'\nimport { getTransformationOptions } from './transformationOptions'\nimport { transformToNested } from './transformToNested'\n\nconst { each, has } = lodash\n\nconst transformFromConfigsToResponse = (configs, callback = null) => {\n\n  const response = {}\n\n  each(configs, (config, key) => {\n\n    let value = has(config, `value`) ? config.value : config.default\n\n    if (callback) {\n\n      const {\n        key: newKey,\n        value: newValue,\n      } = callback(key, config)\n\n      if (newKey) {\n        key = newKey\n      }\n\n      if (newValue) {\n        value = newValue\n      }\n    }\n\n    response[key] = value\n  })\n\n  return response\n}\n\nconst transformToConfigValues = (configs, opts = {}) => {\n\n  const options = getTransformationOptions(opts)\n\n  const response = transformFromConfigsToResponse(configs, (key, config) => {\n\n    key = options.categorized ? `${CATEGORIES[config.category].plural}.${key}` : key\n\n    return {\n      key,\n    }\n  })\n\n  if (options.nested) {\n    return transformToNested(response)\n  }\n\n  return response\n}\n\nexport { transformToConfigValues }\n","import lodash from 'lodash'\n\nimport type {\n  Config,\n  StandardizedConfigs,\n} from './types'\n\nconst { each, isBoolean, isObject, last, split, startsWith, trimEnd } = lodash\n\n/**\n * TODO: This function doesn't know how to handle configs with an empty array value (preSelectedNewsletters) and the config will just be ignored\n */\nconst flattenJsonObject = (object: object, initialPathPrefix: string = ``) => {\n\n  function flatten(object, initialPathPrefix) {\n    if (!object || typeof object !== `object`) {\n      return [{ [initialPathPrefix]: object }]\n    }\n\n    const prefix = initialPathPrefix\n      ? Array.isArray(object)\n        ? initialPathPrefix\n        : `${initialPathPrefix}.`\n      : ``\n\n    return Object.keys(object)\n      .flatMap((key) =>\n        flatten(\n          object[key],\n          Array.isArray(object) ? `${prefix}[${key}]` : `${prefix}${key}`,\n        ),\n      )\n      .reduce((acc, path) => ({ ...acc, ...path }), [])\n  }\n\n  const flattenedObject = flatten(object, initialPathPrefix)\n\n  const configs = {}\n  each(flattenedObject, (value, key) => {\n    const splitKey = split(key, `.`)\n    const lastPart = last(splitKey)\n    if (startsWith(lastPart, `#`)) {\n      if (lastPart === `#value`) {\n        configs[trimEnd(key, `.#value`)] = value\n      }\n    } else {\n      configs[key] = value\n    }\n  })\n\n  return configs\n}\n\nconst createConfigsFromJson = (json: object): StandardizedConfigs => {\n\n  const configs = {}\n\n  const flattenJson = flattenJsonObject(json)\n\n  each(flattenJson, (value, key) => {\n\n    let defaultValue = value\n    if (isObject(value)) {\n      defaultValue = value[`#value`]\n    }\n\n    const config: Config = {\n      default: defaultValue,\n    }\n\n    if (isBoolean(defaultValue)) {\n      config.type = `switch`\n    }\n\n    configs[key] = config\n  })\n\n  return configs\n}\n\nexport { createConfigsFromJson }\n","import lodash from 'lodash'\n\nimport type { Component, ComponentOptions, Components, Config, ConfigObject, Configs, Source, StandardizedConfigs } from '../types'\n\nconst { assign, each, get, has, isObject, kebabCase, last, mapKeys, mapValues, merge, set, size, split, startCase, unset } = lodash\n\nexport type SourceConfigs = {\n  getComponents?: () => Promise<Components>,\n  getConfigs?: () => Promise<Configs>,\n  getLabel?: () => string | Promise<string | undefined>,\n  getName?: () => string | Promise<string | undefined>,\n  source?: string\n}\n\nexport type HelperFunctions = ReturnType<typeof getHelpers>\n\nexport type Definitions = {\n  [key: string]: DefinitionComponent\n}\n\n/* eslint-disable no-unused-vars */\nexport type DefinitionComponent = {\n  getConfigs?: (_: HelperFunctions) => Configs\n  getSettings?: (_: HelperFunctions) => Configs\n  getTranslations?: (_: HelperFunctions) => Configs\n  getUI?: (_: HelperFunctions) => Configs,\n  getFeatures?: (_: HelperFunctions) => Configs,\n  getOptions?: () => Component\n}\n\n/* eslint-enable no-unused-vars */\n\nconst getType = (config: Config) => {\n  if (typeof config === `object`) {\n    switch (typeof config.default) {\n      case `boolean`:\n        return `switch`\n    }\n  }\n\n  return `input`\n}\n\nconst standardizeConfig = (key: string, config: Config, skipDefaultCheck = false) => {\n\n  if (isObject(config)) {\n    if (!skipDefaultCheck && !has(config, `default`)) {\n      throw new Error(`Config \"${key}\" is missing a \"default\" value.`)\n    }\n  } else {\n    config = {\n      default: config,\n    }\n  }\n\n  return config as ConfigObject\n}\n\nconst parseConfig = (key: string, config: Config, options: Partial<ConfigObject> = {}) => {\n\n  config = standardizeConfig(key, config)\n\n  delete config.key\n\n  if (config.docLink) {\n    const docLinkText = `Documentation on this feature can be found <a href=\"${config.docLink}\">here</a>.`\n    config.hint = config.hint ? docLinkText + `<br>${config.hint}` : docLinkText\n    delete config.docLink\n  }\n\n  return assign({\n    default: null, // This is placed here so that `default` appears as first property\n    type: getType(config),\n    label: startCase(last(split(key, `.`))),\n    category: `setting`,\n  } as ConfigObject, config, options) as ConfigObject\n}\n\nconst parseConfigs = (\n  configs: Configs,\n  options: Partial<ConfigObject> = {},\n  // eslint-disable-next-line no-unused-vars\n  callback?: (key: string, config: Config) => void,\n) => {\n\n  configs = mapKeys(configs, (config: Config, key: string) => {\n    return lodash.get(config, `key`, key)\n  })\n\n  return mapValues(configs, (config: Config, key: string) => {\n\n    callback && callback(key, config)\n\n    return parseConfig(key, config, options)\n  }) as StandardizedConfigs\n}\n\nconst parseUniqueConfigs = (set: Configs, configs: Configs, options: Partial<ConfigObject>) => {\n  return parseConfigs(configs, options, (key) => {\n    if (has(set, key)) {\n      throw new Error(`Duplicate key: \"${key}\"`)\n    }\n  })\n}\n\nconst parseConfigsIntoCollection = (set: Configs, configs: Configs, options: Partial<ComponentOptions>) => {\n  merge(set, parseUniqueConfigs(set, configs, options))\n}\n\nconst getHelpers = (components: Components, component: string) => {\n\n  const groupTypes = {\n    group: {\n      path: `groups`,\n    },\n    tab: {\n      path: `tabs`,\n    },\n  }\n\n  const walkConfigs = (configs: Configs, callback = null) => {\n\n    const walked: StandardizedConfigs = {}\n\n    each(configs, (config, key) => {\n      config = standardizeConfig(key, config)\n      if (callback) {\n        const {\n          config: newConfig,\n          key: newKey,\n        } = callback(key, config)\n        walked[newKey] = newConfig\n      } else {\n        walked[key] = config\n      }\n    })\n\n    return walked\n  }\n\n  const setComponentGroup = (name: string, label: string, configs: Configs, type = `group`) => {\n\n    let path: string = groupTypes[type].path\n    let replacement: ComponentOptions = {}\n\n    each(configs, config => {\n      if (typeof config === `object` && config.group) {\n\n        // TODO: This variable should handle cases where group value is deeply nested\n        const groupExpanded = config.group\n\n        each(groupTypes, groupType => {\n          const group = get(components, [component, groupType.path, groupExpanded])\n          if (group) {\n            set(replacement, [groupType.path, groupExpanded], group)\n            unset(components, [component, groupType.path, groupExpanded])\n\n            const holder = get(components, [component, groupType.path], {})\n            if (size(holder) === 0) {\n              unset(components, [component, groupType.path])\n            }\n          }\n        })\n      }\n    })\n\n    // TODO: Need to think about this more\n    // if (has(components, [component, path, name])) {\n    //   throw new Error(`Duplicate ${type}: \"${name}\"`)\n    // }\n\n    set(components, [component, path, name], assign({\n      label: label,\n    }, replacement))\n  }\n\n  const addNested = (name: string, configs: Configs) => {\n    return walkConfigs(configs, (key: string, config: Config) => {\n\n      if (typeof config === `object`) {\n        if (config.visibleIf) {\n          config.visibleIf = `${name}.${config.visibleIf}`\n        }\n\n        config.longLabel = `${startCase(name)} ⇢ ${config.longLabel ? config.longLabel : (config.label ? config.label : startCase(key))}`\n      }\n\n      return {\n        key: `${name}.${key}`,\n        config,\n      }\n    })\n  }\n\n  const addGroup = (\n    name: string,\n    label: string,\n    configs: Configs,\n    nesting = true,\n    type = `group`,\n    /* eslint-disable-next-line no-unused-vars */\n    callback?: (_: string, _2: Config) => void,\n  ) => {\n    setComponentGroup(name, label, configs, type)\n\n    return walkConfigs(configs, (key: string, config: ConfigObject) => {\n      config.group = config.group ? `${name}.${config.group}` : name\n\n      if (callback) {\n        callback(key, config)\n      }\n\n      return {\n        key: nesting ? `${name}.${key}` : key,\n        config,\n      }\n    })\n  }\n\n  const addFeature = (name: string, label: string, configs: Configs, enabled = false, nesting = true) => {\n\n    if (has(configs, `enabled`)) {\n      throw new Error(`Feature \"${name}\" should not contain a property named \"enabled\".`)\n    }\n\n    configs = assign({\n      enabled: standardizeConfig(`enabled`, enabled),\n    }, configs)\n\n    configs = addGroup(name, label, configs, nesting, `group`, (key, config) => {\n      if (key !== `enabled`) {\n        typeof config === `object` && lodash.set(config, `visibleIf`, `${name}.enabled`)\n      }\n    })\n\n    return configs as StandardizedConfigs\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  type AddFieldCallbackInnerFuncType = (key: string, config: Config) => void\n\n  const addField = (\n    key: string,\n    // eslint-disable-next-line no-unused-vars\n    callback?: (arg: { insert: AddFieldCallbackInnerFuncType, modify: AddFieldCallbackInnerFuncType }) => void,\n  ) => {\n\n    let fields: Configs = {}\n\n    const visibleIf = `${key}.isVisible`\n\n    const prettyKey = startCase(key)\n\n    fields.isVisible = {\n      default: true,\n      label: `Visible`,\n      longLabel: `${prettyKey} ⇢ Visible`,\n      styleClasses: `col-md-2`,\n    }\n\n    fields.required = {\n      default: false,\n      label: `Required`,\n      longLabel: `${prettyKey} ⇢ Required`,\n      visibleIf: visibleIf,\n      styleClasses: `col-md-2`,\n    }\n\n    fields.disabled = {\n      default: false,\n      label: `Disabled`,\n      longLabel: `${prettyKey} ⇢ Disabled`,\n      visibleIf: visibleIf,\n      styleClasses: `col-md-2`,\n    }\n\n    fields.readonly = {\n      default: false,\n      label: `Readonly`,\n      longLabel: `${prettyKey} ⇢ Readonly`,\n      visibleIf: visibleIf,\n      styleClasses: `col-md-2`,\n    }\n\n    fields.hasAutoFocus = {\n      default: false,\n      label: `Autofocus`,\n      longLabel: `${prettyKey} ⇢ Autofocus`,\n      visibleIf: visibleIf,\n      styleClasses: `col-md-2`,\n    }\n\n    fields.pattern = {\n      default: ``,\n      label: `Pattern`,\n      longLabel: `${prettyKey} ⇢ Pattern`,\n      visibleIf: visibleIf,\n      styleClasses: `col-md-12`,\n    }\n\n    if (callback) {\n\n      const insert: AddFieldCallbackInnerFuncType = (key, config) => {\n\n        if (has(fields, key)) {\n          throw new Error(`Field ${key} already exists!`)\n        }\n\n        const parsedConfig = parseConfig(key, config, {\n          visibleIf: visibleIf,\n          styleClasses: `col-md-12`,\n        })\n\n        parsedConfig.longLabel = `${prettyKey} ⇢ ${parsedConfig.label}`\n\n        fields[key] = parsedConfig\n      }\n\n      const modify: AddFieldCallbackInnerFuncType = (key, config) => {\n        merge(fields[key], standardizeConfig(key, config, true))\n      }\n\n      callback && callback({\n        insert,\n        modify,\n      })\n    }\n\n    return addGroup(key, startCase(key), fields, true)\n  }\n\n  const addTab = (label: string, configs: Configs) => {\n\n    const name = kebabCase(label)\n\n    return addGroup(name, label, configs, false, `tab`)\n  }\n\n  return {\n    addNested,\n    addFeature,\n    addGroup,\n    addTab,\n    addField,\n  }\n}\n\nconst parseConfigsAndComponents = (definitions: Definitions) => {\n\n  const configs: Configs = {}\n  const components = parseComponents(definitions)\n\n  each(definitions, (component, key) => {\n\n    const {\n      getConfigs,\n      getFeatures,\n      getSettings,\n      getTranslations,\n      getUI,\n    } = component\n\n    const options: Partial<ConfigObject> = {\n      component: key,\n    }\n\n    const helpers = getHelpers(components, key)\n\n    if (getConfigs) {\n      parseConfigsIntoCollection(configs, getConfigs(helpers), options)\n    } else {\n\n      if (getSettings) {\n        parseConfigsIntoCollection(configs, getSettings(helpers), assign(options, {\n          category: `setting`,\n        }))\n      }\n\n      if (getTranslations) {\n        parseConfigsIntoCollection(configs, getTranslations(helpers), assign(options, {\n          category: `translation`,\n        }))\n      }\n\n      if (getUI) {\n        parseConfigsIntoCollection(configs, getUI(helpers), assign(options, {\n          category: `ui`,\n        }))\n      }\n\n      if (getFeatures) {\n        parseConfigsIntoCollection(configs, getFeatures(helpers), assign(options, {\n          category: `feature`,\n        }))\n      }\n    }\n  })\n\n  return {\n    configs,\n    components,\n  }\n}\n\nconst parseComponent = (key: string, component?: ComponentOptions) => {\n  return assign({\n    label: startCase(last(split(key, `.`))),\n    order: 0,\n    toggleable: false,\n    description: null,\n    rootKey: null,\n  }, component) as ComponentOptions\n}\n\nconst parseComponents = (components: Components) => {\n  return mapValues(components, (component, key: string) => {\n    const { getOptions } = component\n\n    return parseComponent(key, getOptions ? getOptions() : null)\n  }) as Components\n}\n\nconst parseComponentsFromConfigs = (configs: Configs, structure: Components = {}) => {\n\n  // TODO: Place all these types in the \"types\" directory\n  const components: Components = {}\n\n  let hasUnsorted = false\n\n  each(configs, config => {\n    if (typeof config === `object` && has(config, `component`)) {\n      if (!has(components, config.component)) {\n\n        let options = {}\n        if (has(structure, config.component)) {\n          const { getOptions } = structure[config.component]\n          options = getOptions ? getOptions() : structure[config.component]\n        }\n\n        components[config.component] = parseComponent(config.component, options)\n      }\n    } else {\n      hasUnsorted = true\n    }\n  })\n\n  if (hasUnsorted && size(components)) {\n    components.unsorted = parseComponent(`unsorted`, {\n      order: 999,\n    })\n  }\n\n  return components\n}\n\nconst parseSource = async ({ getComponents, getConfigs, getLabel, getName, source }: SourceConfigs) => {\n\n  const name = getName ? await getName() : source\n  const label = getLabel ? await getLabel() : startCase(name)\n\n  const options: Source = {\n    name,\n    label,\n  }\n\n  const grabComponents = getComponents ? await getComponents() : null\n\n  if (getConfigs) {\n    const config = parseConfigs(await getConfigs())\n    const components = parseComponentsFromConfigs(config, grabComponents)\n    merge(options, {\n      config,\n      components,\n    })\n  } else {\n    const { components, configs } = parseConfigsAndComponents(grabComponents)\n    merge(options, {\n      configs,\n      components,\n    })\n  }\n\n  return options\n}\n\nclass SourceError extends Error {\n\n  constructor(source, error) {\n    super(`${error.message} (\"${source}\" source)`)\n    this.name = `SourceError`\n  }\n}\n\nexport { parseSource, SourceError }\n","import { parseSource, SourceConfigs } from './parseSource'\n\nconst parseSourceConfigs = async (source: string, stack: SourceConfigs) => {\n\n  const parsedSource = await parseSource({\n    source,\n    ...stack,\n  })\n\n  return parsedSource.configs\n}\n\nexport { parseSourceConfigs }\n"],"names":["_CATEGORIES","ConfigCategory","ConfigCategoryPlurals","CATEGORIES","Setting","plural","label","labelPlural","order","Translation","UI","Feature","assign","lodash","mapValues","getTransformationOptions","options","nested","categorized","each","setWith","transformToNested","object","transformed","value","key","Object","get","has","isBoolean","isObject","last","split","startsWith","trimEnd","kebabCase","mapKeys","merge","set","size","startCase","unset","getType","config","skipDefaultCheck","Error","default","parseConfig","standardizeConfig","docLink","docLinkText","hint","type","category","parseConfigs","configs","callback","parseConfigsIntoCollection","parseUniqueConfigs","parseComponent","component","toggleable","description","rootKey","parseSource","getComponents","getConfigs","getLabel","getName","source","_temp5","name","_temp3","_temp2","grabComponents","_temp","Promise","resolve","then","_getConfigs","components","structure","hasUnsorted","getOptions","unsorted","parseComponentsFromConfigs","definitions","_parseConfigsAndCompo","parseComponents","getFeatures","getSettings","getTranslations","getUI","helpers","groupTypes","group","path","tab","walkConfigs","walked","_callback","addGroup","nesting","setComponentGroup","replacement","groupExpanded","groupType","holder","addNested","visibleIf","longLabel","addFeature","enabled","addTab","addField","fields","prettyKey","isVisible","styleClasses","required","disabled","readonly","hasAutoFocus","pattern","insert","parsedConfig","modify","getHelpers","e","reject","error","_this","message","this","json","flattenJson","initialPathPrefix","flattenedObject","flatten","_ref","prefix","Array","isArray","keys","flatMap","reduce","acc","_extends","splitKey","lastPart","flattenJsonObject","defaultValue","stack","parsedSource","response","opts","newKey","newValue","helpTransformResponse","transformFromConfigsToResponse"],"mappings":"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"}