{"version":3,"file":"index.cjs","sources":["../src/constants/CATEGORIES.ts","../src/fetchConfigs/transformationOptions.ts","../src/fetchConfigs/transformToNested.ts","../src/fetchConfigs/transformResponse.ts","../src/fetchConfigs/transformToConfigValues.ts","../src/parseSource/parseSource.ts","../src/parseSource/parseSourceConfigs.ts"],"sourcesContent":["enum ConfigCategory {\n  Settings = `settings`,\n  Translations = `translations`,\n  UI = `ui`\n}\n\nconst CATEGORIES = {\n  setting: {\n    plural: ConfigCategory.Settings,\n    label: `Setting`,\n    labelPlural: `Settings`,\n    order: 1,\n  },\n  translation: {\n    plural: ConfigCategory.Translations,\n    label: `Translation`,\n    labelPlural: `Translations`,\n    order: 2,\n  },\n  ui: {\n    plural: ConfigCategory.UI,\n    label: `UI`,\n    labelPlural: `UI`,\n    order: 3,\n  },\n  ORGANIZATION_SETTINGS: {\n    plural: `ORGANIZATION_SETTINGS`,\n    label: `Organization`,\n    labelPlural: `Organization`,\n    order: 1,\n  },\n  TRANSLATION_SETTINGS: {\n    plural: `TRANSLATION_SETTINGS`,\n    label: `Translation`,\n    labelPlural: `Translations`,\n    order: 2,\n  },\n  FEATURE_SETTINGS: {\n    plural: `FEATURE_SETTINGS`,\n    label: `Feature`,\n    labelPlural: `Features`,\n    order: 3,\n  },\n}\n\nexport { CATEGORIES, ConfigCategory }\n","import lodash from 'lodash'\n\nconst { assign, mapValues } = lodash\n\nexport type TransformationOptions = {\n  nested: boolean,\n  categorized: boolean,\n}\n\nconst getTransformationOptions = (options: Partial<TransformationOptions> = {}): TransformationOptions => {\n\n  options = mapValues(options, () => true)\n\n  const opts: TransformationOptions = {\n    nested: false,\n    categorized: false,\n  }\n\n  return assign(opts, options)\n}\n\nexport { getTransformationOptions }\n","import lodash from 'lodash'\n\nconst { each, setWith } = lodash\n\nconst transformToNested = object => {\n\n  const transformed = {}\n\n  each(object, (value, key) => {\n    setWith(transformed, key, value, Object)\n  })\n\n  return transformed\n}\n\nexport { transformToNested }\n","import lodash from 'lodash'\n\nimport { getTransformationOptions } from './transformationOptions'\nimport { transformToNested } from './transformToNested'\n\nconst { each, get } = lodash\n\nconst helpTransformResponse = (response, callback = null) => {\n\n  const transformed = {}\n\n  each(response, (value, key) => {\n\n    if (callback) {\n\n      const {\n        key: newKey,\n        value: newValue,\n      } = callback(key, value)\n\n      if (newKey) {\n        key = newKey\n      }\n\n      if (newValue) {\n        value = newValue\n      }\n    }\n\n    transformed[key] = value\n  })\n\n  return transformed\n}\n\nconst transformResponse = (response, opts = {}, configs = null) => {\n\n  const options = getTransformationOptions(opts)\n\n  const transformed = helpTransformResponse(response, key => {\n\n    if (options.categorized) {\n\n      const config = get(configs, key)\n\n      if (config) {\n        key = `${config.category}.${key}`\n      }\n    }\n\n    return {\n      key,\n    }\n  })\n\n  if (options.nested) {\n    return transformToNested(transformed)\n  }\n\n  return transformed\n}\n\nexport { transformResponse }\n","import lodash from 'lodash'\n\nimport { CATEGORIES } from '../constants'\nimport { getTransformationOptions } from './transformationOptions'\nimport { transformToNested } from './transformToNested'\n\nconst { each, has } = lodash\n\nconst transformFromConfigsToResponse = (configs, callback = null) => {\n\n  const response = {}\n\n  each(configs, (config, key) => {\n\n    let value = has(config, `value`) ? config.value : config.default\n\n    if (callback) {\n\n      const {\n        key: newKey,\n        value: newValue,\n      } = callback(key, config)\n\n      if (newKey) {\n        key = newKey\n      }\n\n      if (newValue) {\n        value = newValue\n      }\n    }\n\n    response[key] = value\n  })\n\n  return response\n}\n\nconst transformToConfigValues = (configs, opts = {}) => {\n\n  const options = getTransformationOptions(opts)\n\n  const response = transformFromConfigsToResponse(configs, (key, config) => {\n\n    key = options.categorized ? `${CATEGORIES[config.category].plural}.${key}` : key\n\n    return {\n      key,\n    }\n  })\n\n  if (options.nested) {\n    return transformToNested(response)\n  }\n\n  return response\n}\n\nexport { transformToConfigValues }\n","import lodash from 'lodash'\n\nimport type { Component, ComponentOptions, Components, Config, ConfigObject, Configs, Source, StandardizedConfigs } from '../types'\n\nconst { assign, each, get, has, isObject, kebabCase, last, mapKeys, mapValues, merge, set, size, split, startCase, unset } = lodash\n\nexport type SourceConfigs = {\n  getComponents?: () => Promise<Components>,\n  getConfigs?: () => Promise<Configs>,\n  getLabel?: () => string | Promise<string | undefined>,\n  getName?: () => string | Promise<string | undefined>,\n  source?: string\n}\n\nexport type HelperFunctions = ReturnType<typeof getHelpers>\n\nexport type Definitions = {\n  [key: string]: DefinitionComponent\n}\n\n/* eslint-disable no-unused-vars */\nexport type DefinitionComponent = {\n  getConfigs?: (_: HelperFunctions) => Configs\n  getSettings?: (_: HelperFunctions) => Configs\n  getTranslations?: (_: HelperFunctions) => Configs\n  getUI?: (_: HelperFunctions) => Configs,\n  getOptions?: () => Component\n}\n\n/* eslint-enable no-unused-vars */\n\nconst getType = (config: Config) => {\n  if (typeof config === `object`) {\n    switch (typeof config.default) {\n      case `boolean`:\n        return `switch`\n    }\n  }\n\n  return `input`\n}\n\nconst standardizeConfig = (key: string, config: Config, skipDefaultCheck = false) => {\n\n  if (isObject(config)) {\n    if (!skipDefaultCheck && !has(config, `default`)) {\n      throw new Error(`Config \"${key}\" is missing a \"default\" value.`)\n    }\n  } else {\n    config = {\n      default: config,\n    }\n  }\n\n  return config as ConfigObject\n}\n\nconst parseConfig = (key: string, config: Config, options: Partial<ConfigObject> = {}) => {\n\n  config = standardizeConfig(key, config)\n\n  delete config.key\n\n  if (config.docLink) {\n    const docLinkText = `Documentation on this feature can be found <a href=\"${config.docLink}\">here</a>.`\n    config.hint = config.hint ? docLinkText + `<br>${config.hint}` : docLinkText\n    delete config.docLink\n  }\n\n  return assign({\n    default: null, // This is placed here so that `default` appears as first property\n    type: getType(config),\n    label: startCase(last(split(key, `.`))),\n    category: `setting`,\n  } as ConfigObject, config, options) as ConfigObject\n}\n\nconst parseConfigs = (\n  configs: Configs,\n  options: Partial<ConfigObject> = {},\n  // eslint-disable-next-line no-unused-vars\n  callback?: (key: string, config: Config) => void,\n) => {\n\n  configs = mapKeys(configs, (config: Config, key: string) => {\n    return lodash.get(config, `key`, key)\n  })\n\n  return mapValues(configs, (config: Config, key: string) => {\n\n    callback && callback(key, config)\n\n    return parseConfig(key, config, options)\n  }) as StandardizedConfigs\n}\n\nconst parseUniqueConfigs = (set: Configs, configs: Configs, options: Partial<ConfigObject>) => {\n  return parseConfigs(configs, options, (key) => {\n    if (has(set, key)) {\n      throw new Error(`Duplicate key: \"${key}\"`)\n    }\n  })\n}\n\nconst parseConfigsIntoCollection = (set: Configs, configs: Configs, options: Partial<ComponentOptions>) => {\n  merge(set, parseUniqueConfigs(set, configs, options))\n}\n\nconst getHelpers = (components: Components, component: string) => {\n\n  const groupTypes = {\n    group: {\n      path: `groups`,\n    },\n    tab: {\n      path: `tabs`,\n    },\n  }\n\n  const walkConfigs = (configs: Configs, callback = null) => {\n\n    const walked: StandardizedConfigs = {}\n\n    each(configs, (config, key) => {\n      config = standardizeConfig(key, config)\n      if (callback) {\n        const {\n          config: newConfig,\n          key: newKey,\n        } = callback(key, config)\n        walked[newKey] = newConfig\n      } else {\n        walked[key] = config\n      }\n    })\n\n    return walked\n  }\n\n  const setComponentGroup = (name: string, label: string, configs: Configs, type = `group`) => {\n\n    let path: string = groupTypes[type].path\n    let replacement: ComponentOptions = {}\n\n    each(configs, config => {\n      if (typeof config === `object` && config.group) {\n\n        // TODO: This variable should handle cases where group value is deeply nested\n        const groupExpanded = config.group\n\n        each(groupTypes, groupType => {\n          const group = get(components, [component, groupType.path, groupExpanded])\n          if (group) {\n            set(replacement, [groupType.path, groupExpanded], group)\n            unset(components, [component, groupType.path, groupExpanded])\n\n            const holder = get(components, [component, groupType.path], {})\n            if (size(holder) === 0) {\n              unset(components, [component, groupType.path])\n            }\n          }\n        })\n      }\n    })\n\n    // TODO: Need to think about this more\n    // if (has(components, [component, path, name])) {\n    //   throw new Error(`Duplicate ${type}: \"${name}\"`)\n    // }\n\n    set(components, [component, path, name], assign({\n      label: label,\n    }, replacement))\n  }\n\n  const addNested = (name: string, configs: Configs) => {\n    return walkConfigs(configs, (key: string, config: Config) => {\n\n      if (typeof config === `object`) {\n        if (config.visibleIf) {\n          config.visibleIf = `${name}.${config.visibleIf}`\n        }\n\n        config.longLabel = `${startCase(name)} â‡¢ ${config.longLabel ? config.longLabel : (config.label ? config.label : startCase(key))}`\n      }\n\n      return {\n        key: `${name}.${key}`,\n        config,\n      }\n    })\n  }\n\n  const addGroup = (\n    name: string,\n    label: string,\n    configs: Configs,\n    nesting = true,\n    type = `group`,\n    /* eslint-disable-next-line no-unused-vars */\n    callback?: (_: string, _2: Config) => void,\n  ) => {\n    setComponentGroup(name, label, configs, type)\n\n    return walkConfigs(configs, (key: string, config: ConfigObject) => {\n      config.group = config.group ? `${name}.${config.group}` : name\n\n      if (callback) {\n        callback(key, config)\n      }\n\n      return {\n        key: nesting ? `${name}.${key}` : key,\n        config,\n      }\n    })\n  }\n\n  const addFeature = (name: string, label: string, configs: Configs, enabled = false, nesting = true) => {\n\n    if (has(configs, `enabled`)) {\n      throw new Error(`Feature \"${name}\" should not contain a property named \"enabled\".`)\n    }\n\n    configs = assign({\n      enabled: standardizeConfig(`enabled`, enabled),\n    }, configs)\n\n    configs = addGroup(name, label, configs, nesting, `group`, (key, config) => {\n      if (key !== `enabled`) {\n        typeof config === `object` && lodash.set(config, `visibleIf`, `${name}.enabled`)\n      }\n    })\n\n    return configs as StandardizedConfigs\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  type AddFieldCallbackInnerFuncType = (key: string, config: Config) => void\n\n  const addField = (\n    key: string,\n    // eslint-disable-next-line no-unused-vars\n    callback?: (arg: { insert: AddFieldCallbackInnerFuncType, modify: AddFieldCallbackInnerFuncType }) => void,\n  ) => {\n\n    let fields: Configs = {}\n\n    const visibleIf = `${key}.isVisible`\n\n    const prettyKey = startCase(key)\n\n    fields.isVisible = {\n      default: true,\n      label: `Visible`,\n      longLabel: `${prettyKey} â‡¢ Visible`,\n      styleClasses: `col-md-2`,\n    }\n\n    fields.required = {\n      default: false,\n      label: `Required`,\n      longLabel: `${prettyKey} â‡¢ Required`,\n      visibleIf: visibleIf,\n      styleClasses: `col-md-2`,\n    }\n\n    fields.disabled = {\n      default: false,\n      label: `Disabled`,\n      longLabel: `${prettyKey} â‡¢ Disabled`,\n      visibleIf: visibleIf,\n      styleClasses: `col-md-2`,\n    }\n\n    fields.readonly = {\n      default: false,\n      label: `Readonly`,\n      longLabel: `${prettyKey} â‡¢ Readonly`,\n      visibleIf: visibleIf,\n      styleClasses: `col-md-2`,\n    }\n\n    fields.hasAutoFocus = {\n      default: false,\n      label: `Autofocus`,\n      longLabel: `${prettyKey} â‡¢ Autofocus`,\n      visibleIf: visibleIf,\n      styleClasses: `col-md-2`,\n    }\n\n    fields.pattern = {\n      default: ``,\n      label: `Pattern`,\n      longLabel: `${prettyKey} â‡¢ Pattern`,\n      visibleIf: visibleIf,\n      styleClasses: `col-md-12`,\n    }\n\n    if (callback) {\n\n      const insert: AddFieldCallbackInnerFuncType = (key, config) => {\n\n        if (has(fields, key)) {\n          throw new Error(`Field ${key} already exists!`)\n        }\n\n        const parsedConfig = parseConfig(key, config, {\n          visibleIf: visibleIf,\n          styleClasses: `col-md-12`,\n        })\n\n        parsedConfig.longLabel = `${prettyKey} â‡¢ ${parsedConfig.label}`\n\n        fields[key] = parsedConfig\n      }\n\n      const modify: AddFieldCallbackInnerFuncType = (key, config) => {\n        merge(fields[key], standardizeConfig(key, config, true))\n      }\n\n      callback && callback({\n        insert,\n        modify,\n      })\n    }\n\n    return addGroup(key, startCase(key), fields, true)\n  }\n\n  const addTab = (label: string, configs: Configs) => {\n\n    const name = kebabCase(label)\n\n    return addGroup(name, label, configs, false, `tab`)\n  }\n\n  return {\n    addNested,\n    addFeature,\n    addGroup,\n    addTab,\n    addField,\n  }\n}\n\nconst parseConfigsAndComponents = (definitions: Definitions) => {\n\n  const configs: Configs = {}\n  const components = parseComponents(definitions)\n\n  each(definitions, (component, key) => {\n\n    const {\n      getConfigs,\n      getSettings,\n      getTranslations,\n      getUI,\n    } = component\n\n    const options: Partial<ConfigObject> = {\n      component: key,\n    }\n\n    const helpers = getHelpers(components, key)\n\n    if (getConfigs) {\n      parseConfigsIntoCollection(configs, getConfigs(helpers), options)\n    } else {\n\n      if (getSettings) {\n        parseConfigsIntoCollection(configs, getSettings(helpers), assign(options, {\n          category: `setting`,\n        }))\n      }\n\n      if (getTranslations) {\n        parseConfigsIntoCollection(configs, getTranslations(helpers), assign(options, {\n          category: `translation`,\n        }))\n      }\n\n      if (getUI) {\n        parseConfigsIntoCollection(configs, getUI(helpers), assign(options, {\n          category: `ui`,\n        }))\n      }\n    }\n  })\n\n  return {\n    configs,\n    components,\n  }\n}\n\nconst parseComponent = (key: string, component?: ComponentOptions) => {\n  return assign({\n    label: startCase(last(split(key, `.`))),\n    order: 0,\n    toggleable: false,\n    description: null,\n    rootKey: null,\n  }, component) as ComponentOptions\n}\n\nconst parseComponents = (components: Components) => {\n  return mapValues(components, (component, key: string) => {\n    const { getOptions } = component\n\n    return parseComponent(key, getOptions ? getOptions() : null)\n  }) as Components\n}\n\nconst parseComponentsFromConfigs = (configs: Configs, structure: Components = {}) => {\n\n  // TODO: Place all these types in the \"types\" directory\n  const components: Components = {}\n\n  let hasUnsorted = false\n\n  each(configs, config => {\n    if (typeof config === `object` && has(config, `component`)) {\n      if (!has(components, config.component)) {\n\n        let options = {}\n        if (has(structure, config.component)) {\n          const { getOptions } = structure[config.component]\n          options = getOptions ? getOptions() : structure[config.component]\n        }\n\n        components[config.component] = parseComponent(config.component, options)\n      }\n    } else {\n      hasUnsorted = true\n    }\n  })\n\n  if (hasUnsorted && size(components)) {\n    components.unsorted = parseComponent(`unsorted`, {\n      order: 999,\n    })\n  }\n\n  return components\n}\n\nconst parseSource = async ({ getComponents, getConfigs, getLabel, getName, source }: SourceConfigs) => {\n\n  const name = getName ? await getName() : source\n  const label = getLabel ? await getLabel() : startCase(name)\n\n  const options: Source = {\n    name,\n    label,\n  }\n\n  const grabComponents = getComponents ? await getComponents() : null\n\n  if (getConfigs) {\n    const config = parseConfigs(await getConfigs())\n    const components = parseComponentsFromConfigs(config, grabComponents)\n    merge(options, {\n      config,\n      components,\n    })\n  } else {\n    const { components, configs } = parseConfigsAndComponents(grabComponents)\n    merge(options, {\n      configs,\n      components,\n    })\n  }\n\n  return options\n}\n\nclass SourceError extends Error {\n\n  constructor(source, error) {\n    super(`${error.message} (\"${source}\" source)`)\n    this.name = `SourceError`\n  }\n}\n\nexport { parseSource, SourceError }\n","import { parseSource, SourceConfigs } from '../'\n\nconst parseSourceConfigs = async (source: string, stack: SourceConfigs) => {\n\n  const parsedSource = await parseSource({\n    source,\n    ...stack,\n  })\n\n  return parsedSource.configs\n}\n\nexport { parseSourceConfigs }\n"],"names":["ConfigCategory","CATEGORIES","setting","plural","Settings","label","labelPlural","order","translation","Translations","ui","UI","ORGANIZATION_SETTINGS","TRANSLATION_SETTINGS","FEATURE_SETTINGS","assign","lodash","mapValues","getTransformationOptions","options","nested","categorized","each","setWith","transformToNested","object","transformed","value","key","Object","get","has","isObject","kebabCase","last","mapKeys","merge","set","size","split","startCase","unset","getType","config","standardizeConfig","skipDefaultCheck","Error","default","parseConfig","docLink","docLinkText","hint","type","category","parseConfigs","configs","callback","parseConfigsIntoCollection","parseUniqueConfigs","parseComponent","component","toggleable","description","rootKey","parseSource","getComponents","_ref","getConfigs","getLabel","getName","source","name","grabComponents","then","_getConfigs","components","structure","hasUnsorted","getOptions","unsorted","parseComponentsFromConfigs","definitions","parseConfigsAndComponents","parseComponents","getSettings","getTranslations","getUI","helpers","groupTypes","group","path","tab","walkConfigs","walked","_callback","addGroup","nesting","replacement","groupExpanded","groupType","holder","setComponentGroup","addNested","visibleIf","longLabel","addFeature","enabled","addTab","addField","fields","prettyKey","isVisible","styleClasses","required","disabled","readonly","hasAutoFocus","pattern","insert","parsedConfig","modify","getHelpers","_parseConfigsAndCompo","_temp","Promise","resolve","_temp2","e","reject","SourceError","_Error","error","_this","call","this","message","stack","_extends","parsedSource","response","opts","newKey","newValue","helpTransformResponse","transformFromConfigsToResponse"],"mappings":"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"}