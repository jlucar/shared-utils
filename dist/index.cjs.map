{"version":3,"file":"index.cjs","sources":["../src/fetchConfigs/transformationOptions.ts","../src/fetchConfigs/transformToNested.ts","../src/fetchConfigs/transformResponse.ts","../src/fetchConfigs/transformToConfigValues.ts","../src/parseSource/parseSource.ts","../src/parseSource/parseSourceConfigs.ts"],"sourcesContent":["import lodash from 'lodash'\n\nconst { assign, mapValues } = lodash\n\nexport type TransformationOptions = {\n  nested: boolean,\n  categorized: boolean,\n}\n\nconst getTransformationOptions = (options: Partial<TransformationOptions> = {}): TransformationOptions => {\n\n  options = mapValues(options, () => true)\n\n  const opts: TransformationOptions = {\n    nested: false,\n    categorized: false,\n  }\n\n  return assign(opts, options)\n}\n\nexport { getTransformationOptions }\n","import lodash from 'lodash'\n\nconst { each, setWith } = lodash\n\nconst transformToNested = object => {\n\n  const transformed = {}\n\n  each(object, (value, key) => {\n    setWith(transformed, key, value, Object)\n  })\n\n  return transformed\n}\n\nexport { transformToNested }\n","import lodash from 'lodash'\n\nimport { getTransformationOptions } from './transformationOptions'\nimport { transformToNested } from './transformToNested'\n\nconst { each, get } = lodash\n\nconst helpTransformResponse = (response, callback = null) => {\n\n  const transformed = {}\n\n  each(response, (value, key) => {\n\n    if (callback) {\n\n      const {\n        key: newKey,\n        value: newValue,\n      } = callback(key, value)\n\n      if (newKey) {\n        key = newKey\n      }\n\n      if (newValue) {\n        value = newValue\n      }\n    }\n\n    transformed[key] = value\n  })\n\n  return transformed\n}\n\nconst transformResponse = (response, opts = {}, configs = null) => {\n\n  const options = getTransformationOptions(opts)\n\n  const transformed = helpTransformResponse(response, key => {\n\n    if (options.categorized) {\n\n      const config = get(configs, key)\n\n      if (config) {\n        key = `${config.category}.${key}`\n      }\n    }\n\n    return {\n      key,\n    }\n  })\n\n  if (options.nested) {\n    return transformToNested(transformed)\n  }\n\n  return transformed\n}\n\nexport { transformResponse }\n","import lodash from 'lodash'\n\nimport { getTransformationOptions } from './transformationOptions'\nimport { transformToNested } from './transformToNested' \n\nconst { each, has } = lodash\n\nconst transformFromConfigsToResponse = (configs, callback = null) => {\n\n  const response = {}\n\n  each(configs, (config, key) => {\n\n    let value = has(config, `value`) ? config.value : config.default\n\n    if (callback) {\n\n      const {\n        key: newKey,\n        value: newValue,\n      } = callback(key, config)\n\n      if (newKey) {\n        key = newKey\n      }\n\n      if (newValue) {\n        value = newValue\n      }\n    }\n\n    response[key] = value\n  })\n\n  return response\n}\n\nconst transformToConfigValues = (configs, opts = {}) => {\n\n  const options = getTransformationOptions(opts)\n\n  const response = transformFromConfigsToResponse(configs, (key, config) => {\n\n    key = options.categorized ? `${config.category}.${key}` : key\n\n    return {\n      key,\n    }\n  })\n\n  if (options.nested) {\n    return transformToNested(response)\n  }\n\n  return response\n}\n\nexport { transformToConfigValues }\n","import lodash from 'lodash'\n\nimport type { Component, ComponentOptions, Components, Config, ConfigObject, Configs, Source, StandardizedConfigs } from '../types'\n\nconst { assign, each, get, has, isObject, kebabCase, last, mapKeys, mapValues, merge, set, size, split, startCase, unset } = lodash\n\nexport type SourceConfigs = { \n  getComponents?: () => Promise<Components>, \n  getConfigs?: () => Promise<Configs>, \n  getLabel?: () => string | Promise<string | undefined>, \n  getName?: () => string | Promise<string | undefined>, \n  source?: string\n}\n\nexport type HelperFunctions = ReturnType<typeof getHelpers>\n\nexport type Definitions = {\n  [key: string]: DefinitionComponent\n}\n\n/* eslint-disable no-unused-vars */\nexport type DefinitionComponent = {\n  getConfigs?: (_: HelperFunctions) => Configs\n  getSettings?: (_: HelperFunctions) => Configs\n  getTranslations?: (_: HelperFunctions) => Configs\n  getUI?: (_: HelperFunctions) => Configs,\n  getOptions?: () => Component\n}\n\n/* eslint-enable no-unused-vars */\n\nconst getType = (config: Config) => {\n  if (typeof config === `object`) {\n     switch (typeof config.default) {\n      case `boolean`:\n        return `switch`\n    }\n  }\n\n  return `input`\n}\n\nconst standardizeConfig = (key: string, config: Config, skipDefaultCheck = false) => {\n\n  if (isObject(config)) {\n    if (!skipDefaultCheck && !has(config, `default`)) {\n      throw new Error(`Config \"${key}\" is missing a \"default\" value.`)\n    }\n  } else {\n    config = {\n      default: config,\n    }\n  }\n\n  return config as ConfigObject\n}\n\nconst parseConfig = (key: string, config: Config, options: Partial<ConfigObject> = {}) => {\n\n  config = standardizeConfig(key, config)\n\n  delete config.key\n\n  if (config.docLink) {\n    const docLinkText = `Documentation on this feature can be found <a href=\"${config.docLink}\">here</a>.`\n    config.hint = config.hint ? docLinkText + `<br>${config.hint}` : docLinkText\n    delete config.docLink\n  }\n\n  return assign({\n    default: null, // This is placed here so that `default` appears as first property\n    type: getType(config),\n    label: startCase(last(split(key, `.`))),\n    category: `setting`,\n  } as ConfigObject, config, options) as ConfigObject\n}\n\nconst parseConfigs = (\n  configs: Configs, \n  options: Partial<ConfigObject> = {}, \n  // eslint-disable-next-line no-unused-vars\n  callback?: (key: string, config: Config) => void,\n) => {\n\n  configs = mapKeys(configs, (config: Config, key: string) => {\n    return lodash.get(config, `key`, key)\n  })\n\n  return mapValues(configs, (config: Config, key: string) => {\n\n    callback && callback(key, config)\n\n    return parseConfig(key, config, options)\n  }) as StandardizedConfigs\n}\n\nconst parseUniqueConfigs = (set: Configs, configs: Configs, options: Partial<ConfigObject>) => {\n  return parseConfigs(configs, options, (key) => {\n    if (has(set, key)) {\n      throw new Error(`Duplicate key: \"${key}\"`)\n    }\n  })\n}\n\nconst parseConfigsIntoCollection = (set: Configs, configs: Configs, options: Partial<ComponentOptions>) => {\n  merge(set, parseUniqueConfigs(set, configs, options))\n}\n\nconst getHelpers = (components: Components, component: string) => {\n\n  const groupTypes = {\n    group: {\n      path: `groups`,\n    },\n    tab: {\n      path: `tabs`,\n    },\n  }\n\n  const walkConfigs = (configs: Configs, callback = null) => {\n\n    const walked: StandardizedConfigs = {}\n\n    each(configs, (config, key) => {\n      config = standardizeConfig(key, config)\n      if (callback) {\n        const {\n          config: newConfig,\n          key: newKey,\n        } = callback(key, config)\n        walked[newKey] = newConfig\n      } else {\n        walked[key] = config\n      }\n    })\n\n    return walked\n  }\n\n  const setComponentGroup = (name: string, label: string, configs: Configs, type = `group`) => {\n\n    let path: string = groupTypes[type].path\n    let replacement: ComponentOptions = {}\n\n    each(configs, config => {\n      if (typeof config === `object` && config.group) {\n\n        // TODO: This variable should handle cases where group value is deeply nested\n        const groupExpanded = config.group\n\n        each(groupTypes, groupType => {\n          const group = get(components, [component, groupType.path, groupExpanded])\n          if (group) {\n            set(replacement, [groupType.path, groupExpanded], group)\n            unset(components, [component, groupType.path, groupExpanded])\n\n            const holder = get(components, [component, groupType.path], {})\n            if (size(holder) === 0) {\n              unset(components, [component, groupType.path])\n            }\n          }\n        })\n      }\n    })\n\n    // TODO: Need to think about this more\n    // if (has(components, [component, path, name])) {\n    //   throw new Error(`Duplicate ${type}: \"${name}\"`)\n    // }\n\n    set(components, [component, path, name], assign({\n      label: label,\n    }, replacement))\n  }\n\n  const addNested = (name: string, configs: Configs) => {\n    return walkConfigs(configs, (key: string, config: Config) => {\n\n      if (typeof config === `object`) {\n        if (config.visibleIf) {\n          config.visibleIf = `${name}.${config.visibleIf}`\n        }\n\n         config.longLabel = `${startCase(name)} â‡¢ ${config.longLabel ? config.longLabel : (config.label ? config.label : startCase(key))}`\n      }\n\n      return {\n        key: `${name}.${key}`,\n        config,\n      }\n      \n    })\n  }\n\n  const addGroup = (\n    name: string, \n    label: string, \n    configs: Configs, \n    nesting = true, \n    type = `group`, \n    /* eslint-disable-next-line no-unused-vars */  \n    callback?: (_: string, _2: Config) => void,\n  ) => {\n    setComponentGroup(name, label, configs, type)\n\n    return walkConfigs(configs, (key: string, config: ConfigObject) => {\n      config.group = config.group ? `${name}.${config.group}` : name\n\n      if (callback) {\n        callback(key, config)\n      }\n\n      return {\n        key: nesting ? `${name}.${key}` : key,\n        config,\n      }\n    })\n  }\n\n  const addFeature = (name: string, label: string, configs: Configs, enabled = false, nesting = true) => {\n\n    if (has(configs, `enabled`)) {\n      throw new Error(`Feature \"${name}\" should not contain a property named \"enabled\".`)\n    }\n\n    configs = assign({\n      enabled: standardizeConfig(`enabled`, enabled),\n    }, configs)\n\n    configs = addGroup(name, label, configs, nesting, `group`, (key, config) => {\n      if (key !== `enabled`) {\n        typeof config === `object` && lodash.set( config, `visibleIf`, `${name}.enabled` )\n      }\n    })\n\n    return configs as StandardizedConfigs\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  type AddFieldCallbackInnerFuncType = (key: string, config: Config ) => void\n\n  const addField = (\n    key: string, \n    // eslint-disable-next-line no-unused-vars\n    callback?: (arg: { insert: AddFieldCallbackInnerFuncType, modify: AddFieldCallbackInnerFuncType }) => void,\n  ) => {\n\n    let fields: Configs = {}\n\n    const visibleIf = `${key}.isVisible`\n\n    const prettyKey = startCase(key)\n\n    fields.isVisible = {\n      default: true,\n      label: `Visible`,\n      longLabel: `${prettyKey} â‡¢ Visible`,\n      styleClasses: `col-md-2`,\n    }\n\n    fields.required = {\n      default: false,\n      label: `Required`,\n      longLabel: `${prettyKey} â‡¢ Required`,\n      visibleIf: visibleIf,\n      styleClasses: `col-md-2`,\n    }\n\n    fields.disabled = {\n      default: false,\n      label: `Disabled`,\n      longLabel: `${prettyKey} â‡¢ Disabled`,\n      visibleIf: visibleIf,\n      styleClasses: `col-md-2`,\n    }\n\n    fields.readonly = {\n      default: false,\n      label: `Readonly`,\n      longLabel: `${prettyKey} â‡¢ Readonly`,\n      visibleIf: visibleIf,\n      styleClasses: `col-md-2`,\n    }\n\n    fields.hasAutoFocus = {\n      default: false,\n      label: `Autofocus`,\n      longLabel: `${prettyKey} â‡¢ Autofocus`,\n      visibleIf: visibleIf,\n      styleClasses: `col-md-2`,\n    }\n\n    fields.pattern = {\n      default: ``,\n      label: `Pattern`,\n      longLabel: `${prettyKey} â‡¢ Pattern`,\n      visibleIf: visibleIf,\n      styleClasses: `col-md-12`,\n    }\n\n    if (callback) {\n\n      const insert: AddFieldCallbackInnerFuncType = (key, config) => {\n\n        if (has(fields, key)) {\n          throw new Error(`Field ${key} already exists!`)\n        }\n\n        const parsedConfig = parseConfig(key, config, {\n          visibleIf: visibleIf,\n          styleClasses: `col-md-12`,\n        })\n\n        parsedConfig.longLabel = `${prettyKey} â‡¢ ${parsedConfig.label}`\n\n        fields[key] = parsedConfig\n      }\n\n      const modify: AddFieldCallbackInnerFuncType = (key, config) => {\n        merge(fields[key], standardizeConfig(key, config, true))\n      }\n\n      callback && callback({\n        insert,\n        modify,\n      })\n    }\n\n    return addGroup(key, startCase(key), fields, true)\n  }\n\n  const addTab = (label: string, configs: Configs) => {\n\n    const name = kebabCase(label)\n\n    return addGroup(name, label, configs, false, `tab`)\n  }\n\n  return {\n    addNested,\n    addFeature,\n    addGroup,\n    addTab,\n    addField,\n  }\n}\n\nconst parseConfigsAndComponents = (definitions: Definitions) => {\n\n  const configs: Configs = {}\n  const components = parseComponents(definitions)\n\n  each(definitions, (component, key) => {\n\n    const {\n      getConfigs,\n      getSettings,\n      getTranslations,\n      getUI,\n    } = component\n\n    const options: Partial<ConfigObject> = {\n      component: key,\n    }\n\n    const helpers = getHelpers(components, key)\n\n    if (getConfigs) {\n      parseConfigsIntoCollection(configs, getConfigs(helpers), options)\n    } else {\n\n      if (getSettings) {\n        parseConfigsIntoCollection(configs, getSettings(helpers), assign(options, {\n          category: `setting`,\n        }))\n      }\n\n      if (getTranslations) {\n        parseConfigsIntoCollection(configs, getTranslations(helpers), assign(options, {\n          category: `translation`,\n        }))\n      }\n\n      if (getUI) {\n        parseConfigsIntoCollection(configs, getUI(helpers), assign(options, {\n          category: `ui`,\n        }))\n      }\n    }\n  })\n\n  return {\n    configs,\n    components,\n  }\n}\n\nconst parseComponent = (key: string, component?: ComponentOptions) => {\n  return assign({\n    label: startCase(last(split(key, `.`))),\n    order: 0,\n    toggleable: false,\n    description: null,\n    rootKey: null,\n  }, component) as ComponentOptions\n}\n\nconst parseComponents = (components: Components) => {\n  return mapValues(components, (component, key: string) => {\n    const { getOptions } = component\n\n    return parseComponent(key, getOptions ? getOptions() : null)\n  }) as Components\n}\n\nconst parseComponentsFromConfigs = (configs: Configs, structure: Components = {}) => {\n\n  // TODO: Place all these types in the \"types\" directory\n  const components: Components = {}\n\n  let hasUnsorted = false\n\n  each(configs, config => {\n    if (typeof config === `object` && has(config, `component`)) {\n      if (!has(components, config.component)) {\n\n        let options = {}\n        if (has(structure, config.component)) {\n          const { getOptions } = structure[config.component]\n          options = getOptions ? getOptions() : structure[config.component]\n        }\n\n        components[config.component] = parseComponent(config.component, options)\n      }\n    } else {\n      hasUnsorted = true\n    }\n  })\n\n  if (hasUnsorted && size(components)) {\n    components.unsorted = parseComponent(`unsorted`, {\n      order: 999,\n    })\n  }\n\n  return components\n}\n\nconst parseSource = async ({ getComponents, getConfigs, getLabel, getName, source }: SourceConfigs) => {\n\n  const name = getName ? await getName() : source\n  const label = getLabel ? await getLabel() : startCase(name)\n\n  const options: Source = {\n    name,\n    label,\n  }\n\n  const grabComponents = getComponents ? await getComponents() : null\n\n  if (getConfigs) {\n    const config = parseConfigs(await getConfigs())\n    const components = parseComponentsFromConfigs(config, grabComponents)\n    merge(options, {\n      config,\n      components,\n    })\n  } else {\n    const { components, configs } = parseConfigsAndComponents(grabComponents)\n    merge(options, {\n      configs,\n      components,\n    })\n  }\n\n  return options\n}\n\n// This should be renamed parseSections (assuming we still need it)\n// const parseConfigs = (source: string, sections) => {\n\n//   const configs: Configs = {}\n\n//   const configKeys = []\n\n//   each(sections, (section, sectionKey) => {\n//     each(section.configs, (config: Config, key: string) => {\n\n//       const finalKey = config.key || key\n//       const finalSection = section.section || sectionKey\n//       const finalCategory = section.category || `setting`\n\n//       if (includes(configKeys, finalKey)) {\n//         throw new Error(`Source \"${source}\" has config with duplicate key \"${finalKey}\". No duplicate keys allowed.`)\n//       } else {\n//         configKeys.push(finalKey)\n//       }\n\n//       const configObj = {\n//         default: null,\n//         type: `input`,\n//         label: startCase(last(split(finalKey, `.`))),\n//         reference: finalKey,\n//         section: finalSection,\n//         category: finalCategory,\n//       }\n\n//       config = assign(configObj, config)\n\n//       configs[finalKey] = config\n//     })\n//   })\n\n//   return configs\n// }\n\nclass SourceError extends Error {\n\n  constructor(source, error) {\n    super(`${error.message} (\"${source}\" source)`)\n    this.name = `SourceError`\n  }\n}\n\nexport { parseSource, SourceError }\n","import { parseSource, SourceConfigs } from '../parseSource/parseSource'\n\nconst parseSourceConfigs = async (source: string, stack: Omit<SourceConfigs, `source`>) => {\n\n  const parsedSource = await parseSource({\n    source,\n    ...stack,\n  })\n\n  return parsedSource.configs\n}\n\nexport { parseSourceConfigs }\n"],"names":["assign","lodash","mapValues","getTransformationOptions","options","nested","categorized","each","setWith","transformToNested","object","transformed","value","key","Object","get","has","isObject","kebabCase","last","mapKeys","merge","set","size","split","startCase","unset","getType","config","standardizeConfig","skipDefaultCheck","Error","default","parseConfig","docLink","docLinkText","hint","type","label","category","parseConfigs","configs","callback","parseConfigsIntoCollection","parseUniqueConfigs","parseComponent","component","order","toggleable","description","rootKey","parseSource","getComponents","_ref","getConfigs","getLabel","getName","source","name","grabComponents","then","_getConfigs","components","structure","hasUnsorted","getOptions","unsorted","parseComponentsFromConfigs","definitions","parseConfigsAndComponents","parseComponents","getSettings","getTranslations","getUI","helpers","groupTypes","group","path","tab","walkConfigs","walked","_callback","addGroup","nesting","replacement","groupExpanded","groupType","holder","setComponentGroup","addNested","visibleIf","longLabel","addFeature","enabled","addTab","addField","fields","prettyKey","isVisible","styleClasses","required","disabled","readonly","hasAutoFocus","pattern","insert","parsedConfig","modify","getHelpers","_parseConfigsAndCompo","_temp","Promise","resolve","_temp2","e","reject","SourceError","_Error","error","_this","call","this","message","stack","_extends","parsedSource","response","opts","newKey","newValue","helpTransformResponse","transformFromConfigsToResponse"],"mappings":"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"}