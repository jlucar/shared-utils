{"version":3,"file":"index.module.mjs","sources":["../src/fetchConfigs/transformationOptions.ts","../src/fetchConfigs/transformResponse.ts","../src/fetchConfigs/transformToConfigValues.ts","../src/fetchConfigs/transformToNested.ts","../src/parseSource/parseSource.ts","../src/parseSource/parseSourceConfigs.ts"],"sourcesContent":["import lodash from 'lodash'\n\nconst { assign, mapValues } = lodash\n\nexport type TransformationOptions = {\n  nested: boolean,\n  categorized: boolean,\n}\n\nconst getTransformationOptions = (options: Partial<TransformationOptions> = {}): TransformationOptions => {\n\n  options = mapValues(options, () => true)\n\n  const opts: TransformationOptions = {\n    nested: false,\n    categorized: false,\n  }\n\n  return assign(opts, options)\n}\n\nexport { getTransformationOptions }\n","import lodash from 'lodash'\n\nimport { getTransformationOptions, transformToNested } from '.'\n\nconst { each, get } = lodash\n\nconst helpTransformResponse = (response, callback = null) => {\n\n  const transformed = {}\n\n  each(response, (value, key) => {\n\n    if (callback) {\n\n      const {\n        key: newKey,\n        value: newValue,\n      } = callback(key, value)\n\n      if (newKey) {\n        key = newKey\n      }\n\n      if (newValue) {\n        value = newValue\n      }\n    }\n\n    transformed[key] = value\n  })\n\n  return transformed\n}\n\nconst transformResponse = (response, opts = {}, configs = null) => {\n\n  const options = getTransformationOptions(opts)\n\n  const transformed = helpTransformResponse(response, key => {\n\n    if (options.categorized) {\n\n      const config = get(configs, key)\n\n      if (config) {\n        key = `${config.category}.${key}`\n      }\n    }\n\n    return {\n      key,\n    }\n  })\n\n  if (options.nested) {\n    return transformToNested(transformed)\n  }\n\n  return transformed\n}\n\nexport { transformResponse }\n","import lodash from 'lodash'\n\nimport { getTransformationOptions, transformToNested } from '.'\n\nconst { each, has } = lodash\n\nconst transformFromConfigsToResponse = (configs, callback = null) => {\n\n  const response = {}\n\n  each(configs, (config, key) => {\n\n    let value = has(config, `value`) ? config.value : config.default\n\n    if (callback) {\n\n      const {\n        key: newKey,\n        value: newValue,\n      } = callback(key, config)\n\n      if (newKey) {\n        key = newKey\n      }\n\n      if (newValue) {\n        value = newValue\n      }\n    }\n\n    response[key] = value\n  })\n\n  return response\n}\n\nconst transformToConfigValues = (configs, opts = {}) => {\n\n  const options = getTransformationOptions(opts)\n\n  const response = transformFromConfigsToResponse(configs, (key, config) => {\n\n    key = options.categorized ? `${config.category}.${key}` : key\n\n    return {\n      key,\n    }\n  })\n\n  if (options.nested) {\n    return transformToNested(response)\n  }\n\n  return response\n}\n\nexport { transformToConfigValues }\n","import lodash from 'lodash'\n\nconst { each, setWith } = lodash\n\nconst transformToNested = object => {\n\n  const transformed = {}\n\n  each(object, (value, key) => {\n    setWith(transformed, key, value, Object)\n  })\n\n  return transformed\n}\n\nexport { transformToNested }\n","import type { Config, Configs } from '@config-manager/types'\nimport lodash from 'lodash'\n\nconst { assign, each, get, has, isObject, kebabCase, last, mapKeys, mapValues, merge, set, size, split, startCase, unset } = lodash\n\nconst getType = (config) => {\n  switch (typeof config.default) {\n    case `boolean`:\n      return `switch`\n    default:\n      return `input`\n  }\n}\n\nconst standardizeConfig = (key, config, skipDefaultCheck = false) => {\n\n  if (isObject(config)) {\n    if (!skipDefaultCheck && !has(config, `default`)) {\n      throw new Error(`Config \"${key}\" is missing a \"default\" value.`)\n    }\n  } else {\n    config = {\n      default: config,\n    }\n  }\n\n  return config\n}\n\nconst parseConfig = (key, config, options = {}) => {\n\n  config = standardizeConfig(key, config)\n\n  delete config.key\n\n  if (config.docLink) {\n    const docLinkText = `Documentation on this feature can be found <a href=\"${config.docLink}\">here</a>.`\n    config.hint = config.hint ? docLinkText + `<br>${config.hint}` : docLinkText\n    delete config.docLink\n  }\n\n  return assign({\n    default: null, // This is placed here so that `default` appears as first property\n    type: getType(config),\n    label: startCase(last(split(key, `.`))),\n    category: `setting`,\n  }, config, options)\n}\n\nconst parseConfigs = (configs: Configs, options = {}, callback = null) => {\n\n  configs = mapKeys(configs, (config: Config, key: string) => {\n    return config[`key`] ? config[`key`] : key\n  })\n\n  return mapValues(configs, (config: Config, key: string) => {\n\n    if (callback) {\n      callback(key, config)\n    }\n\n    return parseConfig(key, config, options)\n  })\n}\n\nconst parseUniqueConfigs = (set, configs, options) => {\n  return parseConfigs(configs, options, (key) => {\n    if (has(set, key)) {\n      throw new Error(`Duplicate key: \"${key}\"`)\n    }\n  })\n}\n\nconst parseConfigsIntoCollection = (set, configs, options) => {\n  merge(set, parseUniqueConfigs(set, configs, options))\n}\n\nconst getHelpers = (components, component) => {\n\n  const groupTypes = {\n    group: {\n      path: `groups`,\n    },\n    tab: {\n      path: `tabs`,\n    },\n  }\n\n  const walkConfigs = (configs, callback = null) => {\n\n    const walked = {}\n\n    each(configs, (config, key) => {\n      config = standardizeConfig(key, config)\n      if (callback) {\n        const {\n          config: newConfig,\n          key: newKey,\n        } = callback(key, config)\n        walked[newKey] = newConfig\n      } else {\n        walked[key] = config\n      }\n    })\n\n    return walked\n  }\n\n  const setComponentGroup = (name, label, configs, type = `group`) => {\n\n    let path = groupTypes[type].path\n    let replacement = {}\n\n    each(configs, config => {\n      if (config.group) {\n\n        // TODO: This variable should handle cases where group value is deeply nested\n        const groupExpanded = config.group\n\n        each(groupTypes, groupType => {\n          const group = get(components, [component, groupType.path, groupExpanded])\n          if (group) {\n            set(replacement, [groupType.path, groupExpanded], group)\n            unset(components, [component, groupType.path, groupExpanded])\n\n            const holder = get(components, [component, groupType.path], {})\n            if (size(holder) === 0) {\n              unset(components, [component, groupType.path])\n            }\n          }\n        })\n      }\n    })\n\n    // TODO: Need to think about this more\n    // if (has(components, [component, path, name])) {\n    //   throw new Error(`Duplicate ${type}: \"${name}\"`)\n    // }\n\n    set(components, [component, path, name], assign({\n      label: label,\n    }, replacement))\n  }\n\n  const addNested = (name, configs) => {\n    return walkConfigs(configs, (key, config) => {\n\n      if (config.visibleIf) {\n        config.visibleIf = `${name}.${config.visibleIf}`\n      }\n\n      config.longLabel = `${startCase(name)} ⇢ ${config.longLabel ? config.longLabel : (config.label ? config.label : startCase(key))}`\n\n      return {\n        key: `${name}.${key}`,\n        config,\n      }\n    })\n  }\n\n  const addGroup = (name, label, configs, nesting = true, type = `group`, callback = null) => {\n\n    setComponentGroup(name, label, configs, type)\n\n    return walkConfigs(configs, (key, config) => {\n      config.group = config.group ? `${name}.${config.group}` : name\n\n      if (callback) {\n        callback(key, config)\n      }\n\n      return {\n        key: nesting ? `${name}.${key}` : key,\n        config,\n      }\n    })\n  }\n\n  const addFeature = (name, label, configs, enabled = false, nesting = true) => {\n\n    if (has(configs, `enabled`)) {\n      throw new Error(`Feature \"${name}\" should not contain a property named \"enabled\".`)\n    }\n\n    configs = assign({\n      enabled: standardizeConfig(`enabled`, enabled),\n    }, configs)\n\n    configs = addGroup(name, label, configs, nesting, `group`, (key, config) => {\n      if (key !== `enabled`) {\n        config.visibleIf = `${name}.enabled`\n      }\n    })\n\n    return configs\n  }\n\n  const addField = (key, callback = null) => {\n\n    let fields: Configs = {}\n\n    const visibleIf = `${key}.isVisible`\n\n    const prettyKey = startCase(key)\n\n    fields.isVisible = {\n      default: true,\n      label: `Visible`,\n      longLabel: `${prettyKey} ⇢ Visible`,\n      styleClasses: `col-md-2`,\n    }\n\n    fields.required = {\n      default: false,\n      label: `Required`,\n      longLabel: `${prettyKey} ⇢ Required`,\n      visibleIf: visibleIf,\n      styleClasses: `col-md-2`,\n    }\n\n    fields.disabled = {\n      default: false,\n      label: `Disabled`,\n      longLabel: `${prettyKey} ⇢ Disabled`,\n      visibleIf: visibleIf,\n      styleClasses: `col-md-2`,\n    }\n\n    fields.readonly = {\n      default: false,\n      label: `Readonly`,\n      longLabel: `${prettyKey} ⇢ Readonly`,\n      visibleIf: visibleIf,\n      styleClasses: `col-md-2`,\n    }\n\n    fields.hasAutoFocus = {\n      default: false,\n      label: `Autofocus`,\n      longLabel: `${prettyKey} ⇢ Autofocus`,\n      visibleIf: visibleIf,\n      styleClasses: `col-md-2`,\n    }\n\n    fields.pattern = {\n      default: ``,\n      label: `Pattern`,\n      longLabel: `${prettyKey} ⇢ Pattern`,\n      visibleIf: visibleIf,\n      styleClasses: `col-md-12`,\n    }\n\n    if (callback) {\n\n      const insert = (key, config) => {\n\n        if (has(fields, key)) {\n          throw new Error(`Field ${key} already exists!`)\n        }\n\n        const parsedConfig = parseConfig(key, config, {\n          visibleIf: visibleIf,\n          styleClasses: `col-md-12`,\n        })\n\n        parsedConfig.longLabel = `${prettyKey} ⇢ ${parsedConfig.label}`\n\n        fields[key] = parsedConfig\n      }\n\n      const modify = (key, config) => {\n        merge(fields[key], standardizeConfig(key, config, true))\n      }\n\n      callback({\n        insert,\n        modify,\n      })\n    }\n\n    return addGroup(key, startCase(key), fields, true)\n  }\n\n  const addTab = (label, configs) => {\n\n    const name = kebabCase(label)\n\n    return addGroup(name, label, configs, false, `tab`)\n  }\n\n  return {\n    addNested,\n    addFeature,\n    addGroup,\n    addTab,\n    addField,\n  }\n}\n\nconst parseConfigsAndComponents = definitions => {\n\n  const configs = {}\n  const components = parseComponents(definitions)\n\n  each(definitions, (component, key) => {\n\n    const {\n      getConfigs,\n      getSettings,\n      getTranslations,\n      getUI,\n    } = component\n\n    const options = {\n      component: key,\n    }\n\n    const helpers = getHelpers(components, key)\n\n    if (getConfigs) {\n      parseConfigsIntoCollection(configs, getConfigs(helpers), options)\n    } else {\n\n      if (getSettings) {\n        parseConfigsIntoCollection(configs, getSettings(helpers), assign(options, {\n          category: `setting`,\n        }))\n      }\n\n      if (getTranslations) {\n        parseConfigsIntoCollection(configs, getTranslations(helpers), assign(options, {\n          category: `translation`,\n        }))\n      }\n\n      if (getUI) {\n        parseConfigsIntoCollection(configs, getUI(helpers), assign(options, {\n          category: `ui`,\n        }))\n      }\n    }\n  })\n\n  return {\n    configs,\n    components,\n  }\n}\n\nconst parseComponent = (key, component = null) => {\n  return assign({\n    label: startCase(last(split(key, `.`))),\n    order: 0,\n    toggleable: false,\n    description: null,\n    rootKey: null,\n  }, component)\n}\n\nconst parseComponents = components => {\n  return mapValues(components, (component, key) => {\n    const { getOptions } = component\n\n    return parseComponent(key, getOptions ? getOptions() : null)\n  })\n}\n\nconst parseComponentsFromConfigs = (configs, structure = {}) => {\n\n  // TODO: Place all these types in the \"types\" directory\n  const components: { [key: string]: object } = {}\n\n  let hasUnsorted = false\n\n  each(configs, config => {\n    if (has(config, `component`)) {\n      if (!has(components, config.component)) {\n\n        let options = {}\n        if (has(structure, config.component)) {\n\n          const { getOptions } = structure[config.component]\n          options = getOptions ? getOptions() : structure[config.component]\n        }\n\n        components[config.component] = parseComponent(config.component, options)\n      }\n    } else {\n      hasUnsorted = true\n    }\n  })\n\n  if (hasUnsorted && size(components)) {\n    components.unsorted = parseComponent(`unsorted`, {\n      order: 999,\n    })\n  }\n\n  return components\n}\n\nconst parseSource = async ({ getComponents, getConfigs, getLabel, getName, source }: { getComponents?: any, getConfigs?: any, getLabel?: any, getName?: any, source?: string }) => {\n\n  const name = getName ? getName() : source\n  const label = getLabel ? getLabel() : startCase(name)\n\n  const options: {\n    name: any,\n    label: any,\n    configs?: any,\n    components?: any\n  } = {\n    name,\n    label,\n  }\n\n  const grabComponents = getComponents ? await getComponents() : null\n\n  if (getConfigs) {\n    const configs = parseConfigs(await getConfigs())\n    const components = parseComponentsFromConfigs(configs, grabComponents)\n    merge(options, {\n      configs,\n      components,\n    })\n  } else {\n    const { components, configs } = parseConfigsAndComponents(grabComponents)\n    merge(options, {\n      configs,\n      components,\n    })\n  }\n\n  return options\n}\n\n// This should be renamed parseSections (assuming we still need it)\n// const parseConfigs = (source: string, sections) => {\n\n//   const configs: Configs = {}\n\n//   const configKeys = []\n\n//   each(sections, (section, sectionKey) => {\n//     each(section.configs, (config: Config, key: string) => {\n\n//       const finalKey = config.key || key\n//       const finalSection = section.section || sectionKey\n//       const finalCategory = section.category || `setting`\n\n//       if (includes(configKeys, finalKey)) {\n//         throw new Error(`Source \"${source}\" has config with duplicate key \"${finalKey}\". No duplicate keys allowed.`)\n//       } else {\n//         configKeys.push(finalKey)\n//       }\n\n//       const configObj = {\n//         default: null,\n//         type: `input`,\n//         label: startCase(last(split(finalKey, `.`))),\n//         reference: finalKey,\n//         section: finalSection,\n//         category: finalCategory,\n//       }\n\n//       config = assign(configObj, config)\n\n//       configs[finalKey] = config\n//     })\n//   })\n\n//   return configs\n// }\n\nclass SourceError extends Error {\n\n  constructor(source, error) {\n    super(`${error.message} (\"${source}\" source)`)\n    this.name = `SourceError`\n  }\n}\n\nexport { parseSource, SourceError }\n","import { parseSource } from '../'\n\nconst parseSourceConfigs = async (source: string, stack) => {\n\n  const parsedSource = await parseSource({\n    source,\n    ...stack,\n  })\n\n  return parsedSource.configs\n}\n\nexport { parseSourceConfigs }\n"],"names":["assign","lodash","mapValues","getTransformationOptions","options","nested","categorized","each","get","transformResponse","response","opts","configs","transformed","callback","value","key","newKey","newValue","_callback","helpTransformResponse","config","category","transformToNested","has","transformToConfigValues","transformFromConfigsToResponse","setWith","object","Object","isObject","kebabCase","last","mapKeys","merge","set","size","split","startCase","unset","getType","standardizeConfig","skipDefaultCheck","Error","default","parseConfig","docLink","docLinkText","hint","type","label","parseConfigs","parseConfigsIntoCollection","parseUniqueConfigs","parseComponent","component","order","toggleable","description","rootKey","parseSource","_ref","getComponents","getConfigs","getLabel","getName","source","_temp3","grabComponents","_temp","Promise","resolve","then","_getConfigs","components","structure","hasUnsorted","getOptions","unsorted","parseComponentsFromConfigs","definitions","_parseConfigsAndCompo","parseComponents","getSettings","getTranslations","getUI","helpers","groupTypes","group","path","tab","walkConfigs","walked","addGroup","name","nesting","replacement","groupExpanded","groupType","holder","setComponentGroup","addNested","visibleIf","longLabel","addFeature","enabled","addTab","addField","fields","prettyKey","isVisible","styleClasses","required","disabled","readonly","hasAutoFocus","pattern","insert","parsedConfig","modify","getHelpers","e","reject","SourceError","_Error","error","_this","call","this","message","parseSourceConfigs","stack","_extends","parsedSource"],"mappings":"sBAEA,IAAQA,EAAsBC,EAAtBD,OAAQE,EAAcD,EAAdC,UAOVC,EAA2B,SAACC,GAShC,YATgCA,IAAAA,IAAAA,EAA0C,IAE1EA,EAAUF,EAAUE,EAAS,kBAAA,IAOtBJ,EAL6B,CAClCK,QAAQ,EACRC,aAAa,GAGKF,ICddG,EAAcN,EAAdM,KAAMC,EAAQP,EAARO,IA8BRC,EAAoB,SAACC,EAAUC,EAAWC,QAAkB,IAA7BD,IAAAA,EAAO,SAAIC,IAAAA,IAAAA,EAAU,MAExD,IAAMR,EAAUD,EAAyBQ,GAEnCE,EAhCsB,SAACH,EAAUI,QAAAA,IAAAA,IAAAA,EAAW,MAElD,IAAMD,EAAc,GAuBpB,OArBAN,EAAKG,EAAU,SAACK,EAAOC,GAErB,GAAIF,EAAU,CAEZ,IAGIA,EAAAA,EAASE,EAAKD,GAFXE,IAALD,IACOE,EAFTC,EAEEJ,MAGEE,IACFD,EAAMC,GAGJC,IACFH,EAAQG,GAIZL,EAAYG,GAAOD,IAGdF,EAOaO,CAAsBV,EAAU,SAAAM,GAElD,GAAIZ,EAAQE,YAAa,CAEvB,IAAMe,EAASb,EAAII,EAASI,GAExBK,IACFL,EAASK,EAAOC,SAAYN,IAAAA,GAIhC,MAAO,CACLA,IAAAA,KAIJ,OAAIZ,EAAQC,OACHkB,EAAkBV,GAGpBA,GCtDDN,EAAcN,EAAdM,KAAMiB,EAAQvB,EAARuB,IAgCRC,EAA0B,SAACb,EAASD,QAAAA,IAAAA,IAAAA,EAAO,IAE/C,IAAMP,EAAUD,EAAyBQ,GAEnCD,EAlC+B,SAACE,EAASE,QAAmB,IAAnBA,IAAAA,EAAW,MAE1D,IAAMJ,EAAW,GAyBjB,OAvBAH,EAAKK,EAAS,SAACS,EAAQL,GAErB,IAAID,EAAQS,EAAIH,EAAJ,SAAuBA,EAAON,MAAQM,EAAlD,QAEA,GAAIP,EAAU,CAEZ,IAAAK,EAGIL,EAASE,EAAKK,GAFXJ,EAALD,EAAAA,IACOE,EAFTC,EAEEJ,MAGEE,IACFD,EAAMC,GAGJC,IACFH,EAAQG,GAIZR,EAASM,GAAOD,IAGXL,EAOUgB,CAA+Bd,EAAS,SAACI,EAAKK,GAI7D,MAAO,CACLL,IAHFA,EAAMZ,EAAQE,YAAiBe,EAAOC,SAAhC,IAA4CN,EAAQA,KAO5D,OAAIZ,EAAQC,OACHkB,EAAkBb,GAGpBA,GCnDDH,EAAkBN,EAAlBM,KAAMoB,EAAY1B,EAAZ0B,QAERJ,EAAoB,SAAAK,GAExB,IAAMf,EAAc,GAMpB,OAJAN,EAAKqB,EAAQ,SAACb,EAAOC,GACnBW,EAAQd,EAAaG,EAAKD,EAAOc,UAG5BhB,k1CCTT,IAAQb,EAAqHC,EAArHD,OAAQO,EAA6GN,EAA7GM,KAAMC,EAAuGP,EAAvGO,IAAKgB,EAAkGvB,EAAlGuB,IAAKM,EAA6F7B,EAA7F6B,SAAUC,EAAmF9B,EAAnF8B,UAAWC,EAAwE/B,EAAxE+B,KAAMC,EAAkEhC,EAAlEgC,QAAS/B,EAAyDD,EAAzDC,UAAWgC,EAA8CjC,EAA9CiC,MAAOC,EAAuClC,EAAvCkC,IAAKC,EAAkCnC,EAAlCmC,KAAMC,EAA4BpC,EAA5BoC,MAAOC,EAAqBrC,EAArBqC,UAAWC,EAAUtC,EAAVsC,MAE7GC,EAAU,SAACnB,GACf,MAEI,kBAFWA,EAAf,QAEI,SAEA,SAIAoB,EAAoB,SAACzB,EAAKK,EAAQqB,GAEtC,QAFsCA,IAAAA,IAAAA,GAAmB,GAErDZ,EAAST,IACX,IAAKqB,IAAqBlB,EAAIH,EAA9B,WACE,MAAUsB,IAAAA,MAAJ,WAAqB3B,EAArB,wCAGRK,EAAS,CACPuB,QAASvB,GAIb,OAAOA,GAGHwB,EAAc,SAAC7B,EAAKK,EAAQjB,GAMhC,QANgD,IAAhBA,IAAAA,EAAU,WAE1CiB,EAASoB,EAAkBzB,EAAKK,IAElBL,IAEVK,EAAOyB,QAAS,CAClB,IAAMC,EAAqE1B,uDAAAA,EAAOyB,QAAlF,cACAzB,EAAO2B,KAAO3B,EAAO2B,KAAOD,EAAW,OAAU1B,EAAO2B,KAASD,SAC1D1B,EAAOyB,QAGhB,OAAO9C,EAAO,CACZ4C,QAAS,KACTK,KAAMT,EAAQnB,GACd6B,MAAOZ,EAAUN,EAAKK,EAAMrB,EAAP,OACrBM,SAAQ,WACPD,EAAQjB,IAGP+C,EAAe,SAACvC,EAAkBR,EAAcU,GAMpD,YANsCV,IAAAA,IAAAA,EAAU,SAAIU,IAAAA,IAAAA,EAAW,MAE/DF,EAAUqB,EAAQrB,EAAS,SAACS,EAAgBL,GAC1C,OAAOK,EAAM,IAAUA,EAAhB,IAAgCL,IAGlCd,EAAUU,EAAS,SAACS,EAAgBL,GAMzC,OAJIF,GACFA,EAASE,EAAKK,GAGTwB,EAAY7B,EAAKK,EAAQjB,MAY9BgD,EAA6B,SAACjB,EAAKvB,EAASR,GAChD8B,EAAMC,EATmB,SAACA,EAAKvB,EAASR,GACxC,OAAO+C,EAAavC,EAASR,EAAS,SAACY,GACrC,GAAIQ,EAAIW,EAAKnB,GACX,MAAM,IAAI2B,MAAyB3B,mBAAAA,EACpC,OAKQqC,CAAmBlB,EAAKvB,EAASR,KAmRxCkD,EAAiB,SAACtC,EAAKuC,GAC3B,YAD2BA,IAAAA,IAAAA,EAAY,MAChCvD,EAAO,CACZkD,MAAOZ,EAAUN,EAAKK,EAAMrB,EAAD,OAC3BwC,MAAO,EACPC,YAAY,EACZC,YAAa,KACbC,QAAS,MACRJ,IA6CCK,EAAAA,SAAWC,GAAA,IAAYC,EAAAA,EAAAA,cAAeC,EAAAA,EAAAA,WAAYC,EAAAA,EAAAA,SAAUC,EAAAA,EAAAA,QAASC,EAAAA,EAAAA,OAAuG,IAAA,IAAAC,EAAA,SAe1KC,GAf0K,IAAAC,EAAA,WAAA,GAiB5KN,EAjB4K,OAAAO,QAAAC,QAkB3IR,KAAnCS,KAAA,SAAAC,GAAA,IAAM7D,EAAUuC,EAAhBsB,GACMC,EArDyB,SAAC9D,EAAS+D,QAAAA,IAAAA,IAAAA,EAAY,IAGvD,IAAMD,EAAwC,GAE1CE,GAAc,EA0BlB,OAxBArE,EAAKK,EAAS,SAAAS,GACZ,GAAIG,EAAIH,EAAD,cACL,IAAKG,EAAIkD,EAAYrD,EAAOkC,WAAY,CAEtC,IAAInD,EAAU,GACd,GAAIoB,EAAImD,EAAWtD,EAAOkC,WAAY,CAEpC,IAAQsB,EAAeF,EAAUtD,EAAOkC,WAAhCsB,WACRzE,EAAUyE,EAAaA,IAAeF,EAAUtD,EAAOkC,WAGzDmB,EAAWrD,EAAOkC,WAAaD,EAAejC,EAAOkC,UAAWnD,SAGlEwE,GAAc,IAIdA,GAAexC,EAAKsC,KACtBA,EAAWI,SAAWxB,EAA2B,WAAA,CAC/CE,MAAO,OAIJkB,EAsBcK,CAA2BnE,EAASwD,GACvDlC,EAAM9B,EAAS,CACbQ,QAAAA,EACA8D,WAAAA,MAGF,IA/H8BM,EAE1BpE,EACA8D,EA4HJO,GA7HIrE,EAAU,GACV8D,EAyDgB,SAAAA,GACtB,OAAOxE,EAAUwE,EAAY,SAACnB,EAAWvC,GACvC,IAAQ6D,EAAetB,EAAfsB,WAER,OAAOvB,EAAetC,EAAK6D,EAAaA,IAAe,QA7DtCK,CAHaF,EA+H4BZ,GA1H5D7D,EAAKyE,EAAa,SAACzB,EAAWvC,GAE5B,IACE+C,EAIER,EAJFQ,WACAoB,EAGE5B,EAHF4B,YACAC,EAEE7B,EAFF6B,gBACAC,EACE9B,EADF8B,MAGIjF,EAAU,CACdmD,UAAWvC,GAGPsE,EAhPS,SAACZ,EAAYnB,GAE9B,IAAMgC,EAAa,CACjBC,MAAO,CACLC,KAAI,UAENC,IAAK,CACHD,KADG,SAKDE,EAAc,SAAC/E,EAASE,QAAAA,IAAAA,IAAAA,EAAW,MAEvC,IAAM8E,EAAS,GAef,OAbArF,EAAKK,EAAS,SAACS,EAAQL,GAErB,GADAK,EAASoB,EAAkBzB,EAAKK,GAC5BP,EAAU,CACZ,IAAAK,EAGIL,EAASE,EAAKK,GAClBuE,EAFE5E,EAAAA,KADAK,EAAAA,YAKFuE,EAAO5E,GAAOK,IAIXuE,GAuDHC,EAAW,SAACC,EAAM5C,EAAOtC,EAASmF,EAAgB9C,EAAgBnC,GAItE,YAJyF,IAAnDiF,IAAAA,GAAU,QAAyC,IAAnC9C,IAAAA,EAAmC,cAAA,IAAnBnC,IAAAA,EAAW,MApDzD,SAACgF,EAAM5C,EAAOtC,EAASqC,QAAAA,IAAAA,IAAAA,EAE/C,SAAA,IAAIwC,EAAOF,EAAWtC,GAAMwC,KACxBO,EAAc,GAElBzF,EAAKK,EAAS,SAAAS,GACZ,GAAIA,EAAOmE,MAAO,CAGhB,IAAMS,EAAgB5E,EAAOmE,MAE7BjF,EAAKgF,EAAY,SAAAW,GACf,IAAMV,EAAQhF,EAAIkE,EAAY,CAACnB,EAAW2C,EAAUT,KAAMQ,IAC1D,GAAIT,EAAO,CACTrD,EAAI6D,EAAa,CAACE,EAAUT,KAAMQ,GAAgBT,GAClDjD,EAAMmC,EAAY,CAACnB,EAAW2C,EAAUT,KAAMQ,IAE9C,IAAME,EAAS3F,EAAIkE,EAAY,CAACnB,EAAW2C,EAAUT,MAAO,IACvC,IAAjBrD,EAAK+D,IACP5D,EAAMmC,EAAY,CAACnB,EAAW2C,EAAUT,aAYlDtD,EAAIuC,EAAY,CAACnB,EAAWkC,EAAMK,GAAO9F,EAAO,CAC9CkD,MAAOA,GACN8C,IAqBHI,CAAkBN,EAAM5C,EAAOtC,EAASqC,GAEjC0C,EAAY/E,EAAS,SAACI,EAAKK,GAOhC,OANAA,EAAOmE,MAAQnE,EAAOmE,MAAWM,EAAlB,IAA0BzE,EAAOmE,MAAUM,EAEtDhF,GACFA,EAASE,EAAKK,GAGT,CACLL,IAAK+E,EAAaD,EAAQ9E,IAAAA,EAAQA,EAClCK,OAAAA,MAqHN,MAAO,CACLgF,UAnJgB,SAACP,EAAMlF,GACvB,OAAO+E,EAAY/E,EAAS,SAACI,EAAKK,GAQhC,OANIA,EAAOiF,YACTjF,EAAOiF,UAAeR,EAAtB,IAA8BzE,EAAOiF,WAGvCjF,EAAOkF,UAAejE,EAAUwD,GAAWzE,OAAAA,EAAOkF,UAAYlF,EAAOkF,UAAalF,EAAO6B,MAAQ7B,EAAO6B,MAAQZ,EAAUtB,IAEnH,CACLA,IAAQ8E,EAAQ9E,IAAAA,EAChBK,OAAAA,MAyIJmF,WAlHiB,SAACV,EAAM5C,EAAOtC,EAAS6F,EAAiBV,GAEzD,QAFwCU,IAAAA,IAAAA,GAAU,QAAOV,IAAAA,IAAAA,GAAU,GAE/DvE,EAAIZ,EAAD,WACL,MAAM,IAAI+B,MAAkBmD,YAAAA,EAC7B,oDAYD,OAVAlF,EAAUZ,EAAO,CACfyG,QAAShE,EAA6BgE,UAAAA,IACrC7F,GAEOiF,EAASC,EAAM5C,EAAOtC,EAASmF,EAAkB,QAAA,SAAC/E,EAAKK,GACxD,YAAHL,IACFK,EAAOiF,UAAeR,EAAtB,eAuGJD,SAAAA,EACAa,OAXa,SAACxD,EAAOtC,GAErB,IAAMkF,EAAO/D,EAAUmB,GAEvB,OAAO2C,EAASC,EAAM5C,EAAOtC,GAAS,EACvC,QAOC+F,SAlGe,SAAC3F,EAAKF,QAAmB,IAAnBA,IAAAA,EAAW,MAEhC,IAAI8F,EAAkB,GAEhBN,EAAetF,EAArB,aAEM6F,EAAYvE,EAAUtB,GA6E5B,OA3EA4F,EAAOE,UAAY,CACjBlE,SAAS,EACTM,MAFiB,UAGjBqD,UAAcM,EAAL,aACTE,aAJiB,YAOnBH,EAAOI,SAAW,CAChBpE,SAAS,EACTM,MAFgB,WAGhBqD,UAAcM,EAAL,cACTP,UAAWA,EACXS,aALgB,YAQlBH,EAAOK,SAAW,CAChBrE,SAAS,EACTM,iBACAqD,UAAcM,EAHE,cAIhBP,UAAWA,EACXS,aAAY,YAGdH,EAAOM,SAAW,CAChBtE,SAAS,EACTM,MAAK,WACLqD,UAAcM,EAHE,cAIhBP,UAAWA,EACXS,aAAY,YAGdH,EAAOO,aAAe,CACpBvE,SAAS,EACTM,MAAK,YACLqD,UAAcM,EAHM,eAIpBP,UAAWA,EACXS,aAAY,YAGdH,EAAOQ,QAAU,CACfxE,QADe,GAEfM,MAAK,UACLqD,UAAcM,EAHC,aAIfP,UAAWA,EACXS,aAAY,aAGVjG,GAsBFA,EAAS,CACPuG,OArBa,SAACrG,EAAKK,GAEnB,GAAIG,EAAIoF,EAAQ5F,GACd,MAAM,IAAI2B,MAAe3B,SAAAA,EAC1B,oBAED,IAAMsG,EAAezE,EAAY7B,EAAKK,EAAQ,CAC5CiF,UAAWA,EACXS,aAAY,cAGdO,EAAaf,UAAeM,EAAeS,MAAAA,EAAapE,MAExD0D,EAAO5F,GAAOsG,GASdC,OANa,SAACvG,EAAKK,GACnBa,EAAM0E,EAAO5F,GAAMyB,EAAkBzB,EAAKK,GAAQ,OAS/CwE,EAAS7E,EAAKsB,EAAUtB,GAAM4F,GAAQ,KAqC7BY,CAAW9C,EAAY1D,GAEnC+C,EACFX,EAA2BxC,EAASmD,EAAWuB,GAAUlF,IAGrD+E,GACF/B,EAA2BxC,EAASuE,EAAYG,GAAUtF,EAAOI,EAAS,CACxEkB,SADwE,aAKxE8D,GACFhC,EAA2BxC,EAASwE,EAAgBE,GAAUtF,EAAOI,EAAS,CAC5EkB,SAD4E,iBAK5E+D,GACFjC,EAA2BxC,EAASyE,EAAMC,GAAUtF,EAAOI,EAAS,CAClEkB,SADkE,WAOnE,CACLV,QAAAA,EACA8D,WAAAA,IAkFAxC,EAAM9B,EAAS,CACbQ,QAFkBA,EAAAA,QAGlB8D,WAHMA,EAAAA,aAzBsK,GAAA,OAAAL,GAAAA,EAAAG,KAAAH,EAAAG,KAAA,WAgChL,OAAOpE,IAAAA,GA9BD0F,EAAO7B,EAAUA,IAAYC,EAG7B9D,EAKF,CACF0F,KAAAA,EACA5C,MATYc,EAAWA,IAAa1B,EAAUwD,IAHgI,OAezJhC,QAAAA,QAAAA,EAAsBA,QAAAA,QAAAA,KAfmIU,KAAAL,GAAAA,EAejH,OAfhD,MAAAsD,GAAA,OAAAnD,QAAAoD,OAAAD,KAyEXE,eAEJ,SAAAC,WAAA,SAAAD,EAAYzD,EAAQ2D,GAClB,IAAAC,EADuB,OACvBA,EAAAF,EAAAG,KAAAC,KAASH,EAAMI,QAAf,MAA4B/D,EAA5B,cAAA8D,MACKlC,KAFkB,cAAAgC,WAAzBF,KAAAD,2EAAA,gBAFwBhF,QCxdpBuF,EAAkB,SAAUhE,EAAgBiE,GAA1B,2BAEKvE,EAAWwE,EAAA,CACpClE,OAAAA,GACGiE,KAJoD3D,KAAA,SAEnD6D,GAKN,OAAOA,EAAazH,UAPE,MAAxB6G,GAAA,OAAAnD,QAAAoD,OAAAD"}