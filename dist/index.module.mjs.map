{"version":3,"file":"index.module.mjs","sources":["../src/constants/CATEGORIES.ts","../src/fetchConfigs/transformationOptions.ts","../src/fetchConfigs/transformToNested.ts","../src/fetchConfigs/transformResponse.ts","../src/fetchConfigs/transformToConfigValues.ts","../src/createConfigsFromJson.ts","../src/parseSource/parseSource.ts","../src/parseSource/parseSourceConfigs.ts"],"sourcesContent":["/* eslint-disable no-unused-vars */\nexport enum ConfigCategory {\n  Setting = `setting`,\n  Translation = `translation`,\n  UI = `ui`,\n  Feature = `feature`\n}\n\nexport enum ConfigCategoryPlurals {\n  Setting = `settings`,\n  Translation = `translations`,\n  UI = `ui`,\n  Feature = `features`\n}\n\n/* eslint-enable: no-unused-vars */\nconst CATEGORIES = {\n  [ConfigCategory.Setting]: {\n    plural: ConfigCategoryPlurals.Setting,\n    label: `Setting`,\n    labelPlural: `Settings`,\n    order: 1,\n  },\n  [ConfigCategory.Translation]: {\n    plural: ConfigCategoryPlurals.Translation,\n    label: `Translation`,\n    labelPlural: `Translations`,\n    order: 2,\n  },\n  [ConfigCategory.UI]: {\n    plural: ConfigCategoryPlurals.UI,\n    label: `UI`,\n    labelPlural: `UI`,\n    order: 3,\n  },\n  [ConfigCategory.Feature]: {\n    plural: ConfigCategoryPlurals.Feature,\n    label: `Feature`,\n    labelPlural: `Features`,\n    order: 4,\n  },\n}\n\nexport { CATEGORIES }\n","import lodash from 'lodash'\n\nconst { assign, mapValues } = lodash\n\nexport type TransformationOptions = {\n  nested: boolean,\n  categorized: boolean,\n}\n\nconst getTransformationOptions = (options: Partial<TransformationOptions> = {}): TransformationOptions => {\n\n  options = mapValues(options, () => true)\n\n  const opts: TransformationOptions = {\n    nested: false,\n    categorized: false,\n  }\n\n  return assign(opts, options)\n}\n\nexport { getTransformationOptions }\n","import lodash from 'lodash'\n\nconst { each, setWith } = lodash\n\nconst transformToNested = object => {\n\n  const transformed = {}\n\n  each(object, (value, key) => {\n    setWith(transformed, key, value, Object)\n  })\n\n  return transformed\n}\n\nexport { transformToNested }\n","import lodash from 'lodash'\n\nimport { CATEGORIES } from '../constants'\nimport { getTransformationOptions } from './transformationOptions'\nimport { transformToNested } from './transformToNested'\n\nconst { each, get } = lodash\n\nconst helpTransformResponse = (response, callback = null) => {\n\n  const transformed = {}\n\n  each(response, (value, key) => {\n\n    if (callback) {\n\n      const {\n        key: newKey,\n        value: newValue,\n      } = callback(key, value)\n\n      if (newKey) {\n        key = newKey\n      }\n\n      if (newValue) {\n        value = newValue\n      }\n    }\n\n    transformed[key] = value\n  })\n\n  return transformed\n}\n\nconst transformResponse = (response, opts = {}, configs = null) => {\n\n  const options = getTransformationOptions(opts)\n\n  const transformed = helpTransformResponse(response, key => {\n\n    if (options.categorized) {\n\n      const config = get(configs, key)\n\n      if (config) {\n        key = `${CATEGORIES[config.category].plural}.${key}`\n      }\n    }\n\n    return {\n      key,\n    }\n  })\n\n  if (options.nested) {\n    return transformToNested(transformed)\n  }\n\n  return transformed\n}\n\nexport { transformResponse }\n","import lodash from 'lodash'\n\nimport { CATEGORIES } from '../constants'\nimport { getTransformationOptions } from './transformationOptions'\nimport { transformToNested } from './transformToNested'\n\nconst { each, has } = lodash\n\nconst transformFromConfigsToResponse = (configs, callback = null) => {\n\n  const response = {}\n\n  each(configs, (config, key) => {\n\n    let value = has(config, `value`) ? config.value : config.default\n\n    if (callback) {\n\n      const {\n        key: newKey,\n        value: newValue,\n      } = callback(key, config)\n\n      if (newKey) {\n        key = newKey\n      }\n\n      if (newValue) {\n        value = newValue\n      }\n    }\n\n    response[key] = value\n  })\n\n  return response\n}\n\nconst transformToConfigValues = (configs, opts = {}) => {\n\n  const options = getTransformationOptions(opts)\n\n  const response = transformFromConfigsToResponse(configs, (key, config) => {\n\n    key = options.categorized ? `${CATEGORIES[config.category].plural}.${key}` : key\n\n    return {\n      key,\n    }\n  })\n\n  if (options.nested) {\n    return transformToNested(response)\n  }\n\n  return response\n}\n\nexport { transformToConfigValues }\n","import lodash from 'lodash'\n\nimport type {\n  Config,\n  StandardizedConfigs,\n} from './types'\n\nconst { each, isBoolean, isObject, last, split, startsWith, trimEnd } = lodash\n\n/**\n * TODO: This function doesn't know how to handle configs with an empty array value (preSelectedNewsletters) and the config will just be ignored\n */\nconst flattenJsonObject = (object: object, initialPathPrefix: string = ``) => {\n\n  function flatten(object, initialPathPrefix) {\n    if (!object || typeof object !== `object`) {\n      return [{ [initialPathPrefix]: object }]\n    }\n\n    const prefix = initialPathPrefix\n      ? Array.isArray(object)\n        ? initialPathPrefix\n        : `${initialPathPrefix}.`\n      : ``\n\n    return Object.keys(object)\n      .flatMap((key) =>\n        flatten(\n          object[key],\n          Array.isArray(object) ? `${prefix}[${key}]` : `${prefix}${key}`,\n        ),\n      )\n      .reduce((acc, path) => ({ ...acc, ...path }), [])\n  }\n\n  const flattenedObject = flatten(object, initialPathPrefix)\n\n  const configs = {}\n  each(flattenedObject, (value, key) => {\n    const splitKey = split(key, `.`)\n    const lastPart = last(splitKey)\n    if (startsWith(lastPart, `#`)) {\n      if (lastPart === `#value`) {\n        configs[trimEnd(key, `.#value`)] = value\n      }\n    } else {\n      configs[key] = value\n    }\n  })\n\n  return configs\n}\n\nconst createConfigsFromJson = (json: object): StandardizedConfigs => {\n\n  const configs = {}\n\n  const flattenJson = flattenJsonObject(json)\n\n  each(flattenJson, (value, key) => {\n\n    let defaultValue = value\n    if (isObject(value)) {\n      defaultValue = value[`#value`]\n    }\n\n    const config: Config = {\n      default: defaultValue,\n    }\n\n    if (isBoolean(defaultValue)) {\n      config.type = `switch`\n    }\n\n    configs[key] = config\n  })\n\n  return configs\n}\n\nexport { createConfigsFromJson }\n","import lodash from 'lodash'\n\nimport type { Component, ComponentOptions, Components, Config, ConfigObject, Configs, Onboarder, Onboarders, OnboarderTabs, Source, StandardizedConfigs } from '../types'\n\nconst { assign, each, get, has, includes, isObject, kebabCase, last, mapKeys, mapValues, merge, set, size, split, startCase, unset } = lodash\n\nexport type SourceConfigs = {\n  getComponents?: () => Promise<Components>,\n  getOnboarders?: () => Promise<Onboarder>,\n  getConfigs?: () => Promise<Configs>,\n  getLabel?: () => string | Promise<string | undefined>,\n  getName?: () => string | Promise<string | undefined>,\n  source?: string\n}\n\n// TODO: HelperFunctions is deprecated\nexport type HelperFunctions = ReturnType<typeof getHelpers>\nexport type Context = ReturnType<typeof getHelpers>\n\nexport type Definitions = {\n  [key: string]: DefinitionComponent\n}\n\n/* eslint-disable no-unused-vars */\nexport type DefinitionComponent = {\n  getConfigs?: (_: HelperFunctions) => Configs\n  getSettings?: (_: HelperFunctions) => Configs\n  getTranslations?: (_: HelperFunctions) => Configs\n  getUI?: (_: HelperFunctions) => Configs,\n  getFeatures?: (_: HelperFunctions) => Configs,\n  getOptions?: () => Component\n}\n\n/* eslint-enable no-unused-vars */\n\nconst getType = (config: Config) => {\n  if (typeof config === `object`) {\n    switch (typeof config.default) {\n      case `boolean`:\n        return `switch`\n    }\n  }\n\n  return `input`\n}\n\nconst standardizeConfig = (key: string, config: Config, skipDefaultCheck = false) => {\n\n  if (isObject(config)) {\n    if (!skipDefaultCheck && !has(config, `default`)) {\n      throw new Error(`Config \"${key}\" is missing a \"default\" value.`)\n    }\n  } else {\n    config = {\n      default: config,\n    }\n  }\n\n  return config as ConfigObject\n}\n\nconst parseConfig = (key: string, config: Config, options: Partial<ConfigObject> = {}) => {\n\n  config = standardizeConfig(key, config)\n\n  delete config.key\n\n  if (config.docLink) {\n    const docLinkText = `Documentation on this feature can be found <a href=\"${config.docLink}\">here</a>.`\n    config.hint = config.hint ? docLinkText + `<br>${config.hint}` : docLinkText\n    delete config.docLink\n  }\n\n  return assign({\n    default: null, // This is placed here so that `default` appears as first property\n    type: getType(config),\n    label: startCase(last(split(key, `.`))),\n    category: `setting`,\n  } as ConfigObject, config, options) as ConfigObject\n}\n\nconst parseConfigs = (\n  configs: Configs,\n  options: Partial<ConfigObject> = {},\n  // eslint-disable-next-line no-unused-vars\n  callback?: (key: string, config: Config) => void,\n) => {\n\n  configs = mapKeys(configs, (config: Config, key: string) => {\n    return lodash.get(config, `key`, key)\n  })\n\n  return mapValues(configs, (config: Config, key: string) => {\n\n    callback && callback(key, config)\n\n    return parseConfig(key, config, options)\n  }) as StandardizedConfigs\n}\n\nconst parseUniqueConfigs = (set: Configs, configs: Configs, options: Partial<ConfigObject>) => {\n  return parseConfigs(configs, options, (key) => {\n    if (has(set, key)) {\n      throw new Error(`Duplicate key: \"${key}\"`)\n    }\n  })\n}\n\nconst parseConfigsIntoCollection = (set: Configs, configs: Configs, options: Partial<ComponentOptions>) => {\n  merge(set, parseUniqueConfigs(set, configs, options))\n}\n\nconst getHelpers = (components: Components, component: string, helperType: string = `setting`) => {\n\n  const groupTypes = {\n    group: {\n      path: `groups`,\n    },\n    tab: {\n      path: `tabs`,\n    },\n  }\n\n  const trackedGroups = []\n\n  const walkConfigs = (configs: Configs, callback = null) => {\n\n    const walked = {}\n\n    each(configs, (config, key) => {\n      config = standardizeConfig(key, config)\n      if (callback) {\n        const {\n          config: newConfig,\n          key: newKey,\n        } = callback(key, config)\n        walked[newKey] = newConfig\n      } else {\n        walked[key] = config\n      }\n    })\n\n    return walked\n  }\n\n  const setComponentGroup = (name: string, label: string, configs: Configs, type = `group`) => {\n\n    let path: string = groupTypes[type].path\n    let replacement: ComponentOptions = {}\n\n    each(configs, config => {\n      if (typeof config === `object` && config.group) {\n\n        // TODO: This variable should handle cases where group value is deeply nested\n        const groupExpanded = config.group\n\n        each(groupTypes, groupType => {\n          const group = get(components, [component, groupType.path, groupExpanded])\n          if (group) {\n            set(replacement, [groupType.path, groupExpanded], group)\n            unset(components, [component, groupType.path, groupExpanded])\n\n            const holder = get(components, [component, groupType.path], {})\n            if (size(holder) === 0) {\n              unset(components, [component, groupType.path])\n            }\n          }\n        })\n      }\n    })\n\n    // TODO: Need to think about this more\n    // if (has(components, [component, path, name])) {\n    //   throw new Error(`Duplicate ${type}: \"${name}\"`)\n    // }\n\n    set(components, [component, path, name], assign({\n      label: label,\n    }, replacement))\n  }\n\n  const addNested = (name: string, configs: Configs) => {\n    return walkConfigs(configs, (key: string, config: Config) => {\n\n      if (typeof config === `object`) {\n        if (config.visibleIf) {\n          config.visibleIf = `${name}.${config.visibleIf}`\n        }\n\n        config.longLabel = `${startCase(name)} ⇢ ${config.longLabel ? config.longLabel : (config.label ? config.label : startCase(key))}`\n      }\n\n      return {\n        key: `${name}.${key}`,\n        config,\n      }\n    })\n  }\n\n  const addGroup = (\n    name: string,\n    label: string,\n    configs: Configs,\n    nesting = true,\n    type = `group`,\n    /* eslint-disable-next-line no-unused-vars */\n    callback?: (_: string, _2: Config) => void,\n  ) => {\n\n    // TODO: Eventually store a running list of problems so you can see a count of the issues\n    if (includes(trackedGroups, name)) {\n      console.warn(`\"${name}\" group already exists in \"${helperType}\"`)\n    } else {\n      trackedGroups.push(name)\n    }\n\n    setComponentGroup(name, label, configs, type)\n\n    return walkConfigs(configs, (key: string, config: ConfigObject) => {\n      config.group = config.group ? `${name}.${config.group}` : name\n\n      if (callback) {\n        callback(key, config)\n      }\n\n      return {\n        key: nesting ? `${name}.${key}` : key,\n        config,\n      }\n    })\n  }\n\n  const addFeature = (name: string, label: string, configs: Configs, enabled = false, nesting = true) => {\n\n    if (has(configs, `enabled`)) {\n      throw new Error(`Feature \"${name}\" should not contain a property named \"enabled\".`)\n    }\n\n    configs = assign({\n      enabled: standardizeConfig(`enabled`, enabled),\n    }, configs)\n\n    configs = addGroup(name, label, configs, nesting, `group`, (key, config) => {\n      if (key !== `enabled`) {\n        typeof config === `object` && lodash.set(config, `visibleIf`, `${name}.enabled`)\n      }\n    })\n\n    return configs as StandardizedConfigs\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  type AddFieldCallbackInnerFuncType = (key: string, config: Config) => void\n  // eslint-disable-next-line no-unused-vars\n  type ModifyLabelCallbackInnerFuncType = (key: string) => void\n\n  const addField = (\n    key: string,\n    // eslint-disable-next-line no-unused-vars\n    callback?: (arg: {\n      insert: AddFieldCallbackInnerFuncType,\n      modify: AddFieldCallbackInnerFuncType,\n      modifyLabel: ModifyLabelCallbackInnerFuncType,\n    }) => void,\n  ) => {\n\n    let fields: Configs = {}\n\n    const visibleIf = `${key}.isVisible`\n\n    const prettyKey = startCase(key)\n\n    let label = prettyKey\n\n    fields.isVisible = {\n      default: true,\n      label: `Visible`,\n      longLabel: `${prettyKey} ⇢ Visible`,\n      styleClasses: `col-md-2`,\n    }\n\n    fields.required = {\n      default: false,\n      label: `Required`,\n      longLabel: `${prettyKey} ⇢ Required`,\n      visibleIf: visibleIf,\n      styleClasses: `col-md-2`,\n    }\n\n    fields.disabled = {\n      default: false,\n      label: `Disabled`,\n      longLabel: `${prettyKey} ⇢ Disabled`,\n      visibleIf: visibleIf,\n      styleClasses: `col-md-2`,\n    }\n\n    fields.readonly = {\n      default: false,\n      label: `Readonly`,\n      longLabel: `${prettyKey} ⇢ Readonly`,\n      visibleIf: visibleIf,\n      styleClasses: `col-md-2`,\n    }\n\n    fields.hasAutoFocus = {\n      default: false,\n      label: `Autofocus`,\n      longLabel: `${prettyKey} ⇢ Autofocus`,\n      visibleIf: visibleIf,\n      styleClasses: `col-md-2`,\n    }\n\n    fields.pattern = {\n      default: ``,\n      label: `Pattern`,\n      longLabel: `${prettyKey} ⇢ Pattern`,\n      visibleIf: visibleIf,\n      styleClasses: `col-md-12`,\n    }\n\n    if (callback) {\n\n      const insert: AddFieldCallbackInnerFuncType = (key, config) => {\n\n        if (has(fields, key)) {\n          throw new Error(`Field ${key} already exists!`)\n        }\n\n        const parsedConfig = parseConfig(key, config, {\n          visibleIf: visibleIf,\n          styleClasses: `col-md-12`,\n        })\n\n        parsedConfig.longLabel = `${prettyKey} ⇢ ${parsedConfig.label}`\n\n        fields[key] = parsedConfig\n      }\n\n      const modify: AddFieldCallbackInnerFuncType = (key, config) => {\n        merge(fields[key], standardizeConfig(key, config, true))\n      }\n\n      const modifyLabel: ModifyLabelCallbackInnerFuncType = newLabel => {\n        label = newLabel\n      }\n\n      callback && callback({\n        insert,\n        modify,\n        modifyLabel,\n      })\n    }\n\n    return addGroup(key, label, fields, true)\n  }\n\n  const addTab = (label: string, configs: Configs) => {\n\n    const name = `${helperType}-${kebabCase(label)}`\n\n    return addGroup(name, label, configs, false, `tab`)\n  }\n\n  return {\n    addNested,\n    addFeature,\n    addGroup,\n    addTab,\n    addField,\n  }\n}\n\nconst parseConfigsAndComponents = (definitions: Definitions) => {\n\n  const configs: Configs = {}\n  const components = parseComponents(definitions)\n\n  each(definitions, (component, key) => {\n\n    const helpParseConfigsWithCategory = (getCategoryFunction, category = `setting`) => {\n\n      let options: Partial<ConfigObject> = {\n        component: key,\n      }\n\n      const helpers = getHelpers(components, key, category)\n\n      if (category) {\n        options = assign(options, {\n          category: category,\n        })\n      }\n\n      const theseConfigs = getCategoryFunction(helpers)\n      if (size(theseConfigs)) {\n\n        const categories = get(components, [key, `categories`], [])\n        categories.push(category)\n        set(components, [key, `categories`], categories)\n\n        parseConfigsIntoCollection(configs, theseConfigs, options)\n      }\n    }\n\n    const {\n      getConfigs,\n      getFeatures,\n      getSettings,\n      getTranslations,\n      getUI,\n    } = component\n\n    if (getConfigs) {\n      helpParseConfigsWithCategory(getConfigs)\n    } else {\n\n      if (getSettings) {\n        helpParseConfigsWithCategory(getSettings, `setting`)\n      }\n\n      if (getTranslations) {\n        helpParseConfigsWithCategory(getTranslations, `translation`)\n      }\n\n      if (getUI) {\n        helpParseConfigsWithCategory(getUI, `ui`)\n      }\n\n      if (getFeatures) {\n        helpParseConfigsWithCategory(getFeatures, `feature`)\n      }\n    }\n  })\n\n  return {\n    configs,\n    components,\n  }\n}\n\nconst parseComponent = (key: string, component?: ComponentOptions) => {\n  return assign({\n    label: startCase(last(split(key, `.`))),\n    order: 0,\n    toggleable: false,\n    description: null,\n    rootKey: null,\n  }, component) as ComponentOptions\n}\n\nconst parseComponents = (components: Components) => {\n  return mapValues(components, (component, key: string) => {\n    const { getOptions } = component\n\n    return parseComponent(key, getOptions ? getOptions() : null)\n  }) as Components\n}\n\nconst parseComponentsFromConfigs = (configs: Configs, structure: Components = {}) => {\n\n  // TODO: Place all these types in the \"types\" directory\n  const components: Components = {}\n\n  let hasUnsorted = false\n\n  each(configs, config => {\n    if (typeof config === `object` && has(config, `component`)) {\n      if (!has(components, config.component)) {\n\n        let options = {}\n        if (has(structure, config.component)) {\n          const { getOptions } = structure[config.component]\n          options = getOptions ? getOptions() : structure[config.component]\n        }\n\n        components[config.component] = parseComponent(config.component, options)\n      }\n    } else {\n      hasUnsorted = true\n    }\n  })\n\n  if (hasUnsorted && size(components)) {\n    components.unsorted = parseComponent(`unsorted`, {\n      order: 999,\n    })\n  }\n\n  return components\n}\n\nconst standardizeConfigs = (configs: Configs, sourceConfigs): StandardizedConfigs => {\n\n  const standardizedConfigs = {}\n\n  each(configs, config => {\n\n    if (isObject(config) && !has(config, `key`)) {\n      throw new Error(`Onboarder config missing key!`)\n    }\n\n    const key: any = isObject(config) ? config.key : config\n\n    if (!has(sourceConfigs, key)) {\n      throw new Error(`Onboarder defines key \"${key}\" which does not exist.`)\n    }\n\n    if (isObject(config)) {\n      standardizedConfigs[key] = assign({}, sourceConfigs[key], config)\n    } else {\n      standardizedConfigs[key] = assign({}, sourceConfigs[key])\n    }\n  })\n\n  return standardizedConfigs\n}\n\nconst parseOnboarderTabs = (tabs, configs): OnboarderTabs => {\n\n  const parsedOnboardersTabs = {}\n\n  each(tabs, (tab, name) => {\n\n    parsedOnboardersTabs[name] = {\n      label: tab.label ? tab.label : startCase(name),\n      configs: standardizeConfigs(tab.configs, configs),\n    }\n  })\n\n  return parsedOnboardersTabs\n}\n\nconst parseOnboarders = (onboarders, configs): Onboarders => {\n\n  const parsedOnboarders = {}\n\n  each(onboarders, ({ getLabel, getTabs }, name) => {\n\n    parsedOnboarders[name] = {\n      label: getLabel ? getLabel() : startCase(name),\n      tabs: getTabs ? parseOnboarderTabs(getTabs(), configs) : {},\n    }\n  })\n\n  return parsedOnboarders\n}\n\nconst parseSource = async ({ getComponents, getConfigs, getLabel, getName, getOnboarders, source }: SourceConfigs) => {\n\n  const name = getName ? await getName() : source\n  const label = getLabel ? await getLabel() : startCase(name)\n\n  const options: Source = {\n    name,\n    label,\n  }\n\n  const grabComponents = getComponents ? await getComponents() : null\n\n  if (getConfigs) {\n    const configs = parseConfigs(await getConfigs())\n    const components = parseComponentsFromConfigs(configs, grabComponents)\n    merge(options, {\n      configs,\n      components,\n    })\n  } else {\n    let { components, configs } = parseConfigsAndComponents(grabComponents)\n    merge(options, {\n      configs,\n      components,\n    })\n  }\n\n  if (getOnboarders) {\n    options.onboarders = parseOnboarders(await getOnboarders(), options.configs)\n  }\n\n  return options\n}\n\nclass SourceError extends Error {\n\n  constructor(source, error) {\n    super(`${error.message} (\"${source}\" source)`)\n    this.name = `SourceError`\n  }\n}\n\nexport { parseSource, SourceError }\n","import { parseSource, SourceConfigs } from './parseSource'\n\nconst parseSourceConfigs = async (source: string, stack: SourceConfigs) => {\n\n  const parsedSource = await parseSource({\n    source,\n    ...stack,\n  })\n\n  return parsedSource.configs\n}\n\nexport { parseSourceConfigs }\n"],"names":["_CATEGORIES","ConfigCategory","ConfigCategoryPlurals","CATEGORIES","Setting","plural","label","labelPlural","order","Translation","UI","Feature","assign","lodash","mapValues","getTransformationOptions","options","nested","categorized","each","setWith","transformToNested","object","transformed","value","key","Object","get","response","opts","configs","callback","newKey","newValue","helpTransformResponse","config","category","has","transformToConfigValues","_callback","transformFromConfigsToResponse","isBoolean","isObject","last","split","startsWith","trimEnd","createConfigsFromJson","json","flattenJson","initialPathPrefix","flattenedObject","flatten","_ref","prefix","Array","isArray","keys","flatMap","reduce","acc","path","_extends","splitKey","lastPart","flattenJsonObject","defaultValue","default","type","includes","kebabCase","mapKeys","merge","set","size","startCase","unset","getType","standardizeConfig","skipDefaultCheck","Error","parseConfig","docLink","hint","docLinkText","parseConfigs","parseComponent","component","toggleable","description","rootKey","standardizeConfigs","sourceConfigs","standardizedConfigs","parseOnboarderTabs","tabs","parsedOnboardersTabs","tab","name","parseSource","_ref2","getComponents","getConfigs","getLabel","getName","getOnboarders","source","_temp7","grabComponents","Promise","resolve","parsedOnboarders","onboarders","_getOnboarders","getTabs","_temp","then","_getConfigs","components","structure","hasUnsorted","getOptions","unsorted","parseComponentsFromConfigs","definitions","parseConfigsAndComponents","parseComponents","getCategoryFunction","helpers","helperType","group","walkConfigs","walked","addGroup","nesting","trackedGroups","console","warn","push","groupTypes","replacement","groupExpanded","groupType","holder","setComponentGroup","addNested","visibleIf","longLabel","addFeature","enabled","addTab","addField","fields","prettyKey","isVisible","styleClasses","required","disabled","readonly","hasAutoFocus","pattern","insert","parsedConfig","modify","modifyLabel","newLabel","getHelpers","theseConfigs","categories","parseUniqueConfigs","parseConfigsIntoCollection","getFeatures","getSettings","getTranslations","getUI","helpParseConfigsWithCategory","_temp2","_temp3","_temp4","e","reject","SourceError","error","_this","_Error","call","this","message","parseSourceConfigs","stack","parsedSource"],"mappings":"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"}