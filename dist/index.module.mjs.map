{"version":3,"file":"index.module.mjs","sources":["../src/constants/CATEGORIES.ts","../src/fetchConfigs/transformationOptions.ts","../src/fetchConfigs/transformToNested.ts","../src/fetchConfigs/transformResponse.ts","../src/fetchConfigs/transformToConfigValues.ts","../src/parseSource/parseSource.ts","../src/parseSource/parseSourceConfigs.ts"],"sourcesContent":["/* eslint-disable no-unused-vars */\nexport enum ConfigCategory {\n  Setting = `setting`,\n  Translation = `translation`,\n  UI = `ui`,\n  OrganizationSettingV3 = `ORGANIZATION_SETTINGS`,\n  TranslationSettingV3 = `TRANSLATION_SETTINGS`,\n  FeatureSettingV3 = `FEATURE_SETTINGS`\n}\n\nexport enum ConfigCategoryPlurals {\n  Setting = `settings`,\n  Translation = `translations`,\n  UI = `ui`,\n  OrganizationSettingV3 = `ORGANIZATION_SETTINGS`,\n  TranslationSettingV3 = `TRANSLATION_SETTINGS`,\n  FeatureSettingV3 = `FEATURE_SETTINGS`\n}\n/* eslint-enable: no-unused-vars */\n\nconst CATEGORIES = {\n  [ConfigCategory.Setting]: {\n    plural: ConfigCategoryPlurals.Setting,\n    label: `Setting`,\n    labelPlural: `Settings`,\n    order: 1,\n  },\n  [ConfigCategory.Translation]: {\n    plural: ConfigCategoryPlurals.Translation,\n    label: `Translation`,\n    labelPlural: `Translations`,\n    order: 2,\n  },\n   [ConfigCategory.UI]: {\n    plural: ConfigCategoryPlurals.UI,\n    label: `UI`,\n    labelPlural: `UI`,\n    order: 3,\n  },\n  [ConfigCategory.OrganizationSettingV3]: {\n    plural: ConfigCategoryPlurals.OrganizationSettingV3,\n    label: `Organization`,\n    labelPlural: `Organization`,\n    order: 1,\n  },\n  [ConfigCategory.TranslationSettingV3]: {\n    plural: ConfigCategoryPlurals.TranslationSettingV3,\n    label: `Translation`,\n    labelPlural: `Translations`,\n    order: 2,\n  },\n  [ConfigCategory.FeatureSettingV3]: {\n    plural: ConfigCategoryPlurals.FeatureSettingV3,\n    label: `Feature`,\n    labelPlural: `Features`,\n    order: 3,\n  },\n}\n\nexport { CATEGORIES }\n","import lodash from 'lodash'\n\nconst { assign, mapValues } = lodash\n\nexport type TransformationOptions = {\n  nested: boolean,\n  categorized: boolean,\n}\n\nconst getTransformationOptions = (options: Partial<TransformationOptions> = {}): TransformationOptions => {\n\n  options = mapValues(options, () => true)\n\n  const opts: TransformationOptions = {\n    nested: false,\n    categorized: false,\n  }\n\n  return assign(opts, options)\n}\n\nexport { getTransformationOptions }\n","import lodash from 'lodash'\n\nconst { each, setWith } = lodash\n\nconst transformToNested = object => {\n\n  const transformed = {}\n\n  each(object, (value, key) => {\n    setWith(transformed, key, value, Object)\n  })\n\n  return transformed\n}\n\nexport { transformToNested }\n","import lodash from 'lodash'\n\nimport { CATEGORIES } from '../constants'\nimport { getTransformationOptions } from './transformationOptions'\nimport { transformToNested } from './transformToNested'\n\nconst { each, get } = lodash\n\nconst helpTransformResponse = (response, callback = null) => {\n\n  const transformed = {}\n\n  each(response, (value, key) => {\n\n    if (callback) {\n\n      const {\n        key: newKey,\n        value: newValue,\n      } = callback(key, value)\n\n      if (newKey) {\n        key = newKey\n      }\n\n      if (newValue) {\n        value = newValue\n      }\n    }\n\n    transformed[key] = value\n  })\n\n  return transformed\n}\n\nconst transformResponse = (response, opts = {}, configs = null) => {\n\n  const options = getTransformationOptions(opts)\n\n  const transformed = helpTransformResponse(response, key => {\n\n    if (options.categorized) {\n\n      const config = get(configs, key)\n\n      if (config) {\n        key = `${CATEGORIES[config.category].plural}.${key}`\n      }\n    }\n\n    return {\n      key,\n    }\n  })\n\n  if (options.nested) {\n    return transformToNested(transformed)\n  }\n\n  return transformed\n}\n\nexport { transformResponse }\n","import lodash from 'lodash'\n\nimport { CATEGORIES } from '../constants'\nimport { getTransformationOptions } from './transformationOptions'\nimport { transformToNested } from './transformToNested'\n\nconst { each, has } = lodash\n\nconst transformFromConfigsToResponse = (configs, callback = null) => {\n\n  const response = {}\n\n  each(configs, (config, key) => {\n\n    let value = has(config, `value`) ? config.value : config.default\n\n    if (callback) {\n\n      const {\n        key: newKey,\n        value: newValue,\n      } = callback(key, config)\n\n      if (newKey) {\n        key = newKey\n      }\n\n      if (newValue) {\n        value = newValue\n      }\n    }\n\n    response[key] = value\n  })\n\n  return response\n}\n\nconst transformToConfigValues = (configs, opts = {}) => {\n\n  const options = getTransformationOptions(opts)\n\n  const response = transformFromConfigsToResponse(configs, (key, config) => {\n\n    key = options.categorized ? `${CATEGORIES[config.category].plural}.${key}` : key\n\n    return {\n      key,\n    }\n  })\n\n  if (options.nested) {\n    return transformToNested(response)\n  }\n\n  return response\n}\n\nexport { transformToConfigValues }\n","import lodash from 'lodash'\n\nimport type { Component, ComponentOptions, Components, Config, ConfigObject, Configs, Source, StandardizedConfigs } from '../types'\n\nconst { assign, each, get, has, isObject, kebabCase, last, mapKeys, mapValues, merge, set, size, split, startCase, unset } = lodash\n\nexport type SourceConfigs = {\n  getComponents?: () => Promise<Components>,\n  getConfigs?: () => Promise<Configs>,\n  getLabel?: () => string | Promise<string | undefined>,\n  getName?: () => string | Promise<string | undefined>,\n  source?: string\n}\n\nexport type HelperFunctions = ReturnType<typeof getHelpers>\n\nexport type Definitions = {\n  [key: string]: DefinitionComponent\n}\n\n/* eslint-disable no-unused-vars */\nexport type DefinitionComponent = {\n  getConfigs?: (_: HelperFunctions) => Configs\n  getSettings?: (_: HelperFunctions) => Configs\n  getTranslations?: (_: HelperFunctions) => Configs\n  getUI?: (_: HelperFunctions) => Configs,\n  getOptions?: () => Component\n}\n\n/* eslint-enable no-unused-vars */\n\nconst getType = (config: Config) => {\n  if (typeof config === `object`) {\n    switch (typeof config.default) {\n      case `boolean`:\n        return `switch`\n    }\n  }\n\n  return `input`\n}\n\nconst standardizeConfig = (key: string, config: Config, skipDefaultCheck = false) => {\n\n  if (isObject(config)) {\n    if (!skipDefaultCheck && !has(config, `default`)) {\n      throw new Error(`Config \"${key}\" is missing a \"default\" value.`)\n    }\n  } else {\n    config = {\n      default: config,\n    }\n  }\n\n  return config as ConfigObject\n}\n\nconst parseConfig = (key: string, config: Config, options: Partial<ConfigObject> = {}) => {\n\n  config = standardizeConfig(key, config)\n\n  delete config.key\n\n  if (config.docLink) {\n    const docLinkText = `Documentation on this feature can be found <a href=\"${config.docLink}\">here</a>.`\n    config.hint = config.hint ? docLinkText + `<br>${config.hint}` : docLinkText\n    delete config.docLink\n  }\n\n  return assign({\n    default: null, // This is placed here so that `default` appears as first property\n    type: getType(config),\n    label: startCase(last(split(key, `.`))),\n    category: `setting`,\n  } as ConfigObject, config, options) as ConfigObject\n}\n\nconst parseConfigs = (\n  configs: Configs,\n  options: Partial<ConfigObject> = {},\n  // eslint-disable-next-line no-unused-vars\n  callback?: (key: string, config: Config) => void,\n) => {\n\n  configs = mapKeys(configs, (config: Config, key: string) => {\n    return lodash.get(config, `key`, key)\n  })\n\n  return mapValues(configs, (config: Config, key: string) => {\n\n    callback && callback(key, config)\n\n    return parseConfig(key, config, options)\n  }) as StandardizedConfigs\n}\n\nconst parseUniqueConfigs = (set: Configs, configs: Configs, options: Partial<ConfigObject>) => {\n  return parseConfigs(configs, options, (key) => {\n    if (has(set, key)) {\n      throw new Error(`Duplicate key: \"${key}\"`)\n    }\n  })\n}\n\nconst parseConfigsIntoCollection = (set: Configs, configs: Configs, options: Partial<ComponentOptions>) => {\n  merge(set, parseUniqueConfigs(set, configs, options))\n}\n\nconst getHelpers = (components: Components, component: string) => {\n\n  const groupTypes = {\n    group: {\n      path: `groups`,\n    },\n    tab: {\n      path: `tabs`,\n    },\n  }\n\n  const walkConfigs = (configs: Configs, callback = null) => {\n\n    const walked = {}\n\n    each(configs, (config, key) => {\n      config = standardizeConfig(key, config)\n      if (callback) {\n        const {\n          config: newConfig,\n          key: newKey,\n        } = callback(key, config)\n        walked[newKey] = newConfig\n      } else {\n        walked[key] = config\n      }\n    })\n\n    return walked\n  }\n\n  const setComponentGroup = (name: string, label: string, configs: Configs, type = `group`) => {\n\n    let path: string = groupTypes[type].path\n    let replacement: ComponentOptions = {}\n\n    each(configs, config => {\n      if (typeof config === `object` && config.group) {\n\n        // TODO: This variable should handle cases where group value is deeply nested\n        const groupExpanded = config.group\n\n        each(groupTypes, groupType => {\n          const group = get(components, [component, groupType.path, groupExpanded])\n          if (group) {\n            set(replacement, [groupType.path, groupExpanded], group)\n            unset(components, [component, groupType.path, groupExpanded])\n\n            const holder = get(components, [component, groupType.path], {})\n            if (size(holder) === 0) {\n              unset(components, [component, groupType.path])\n            }\n          }\n        })\n      }\n    })\n\n    // TODO: Need to think about this more\n    // if (has(components, [component, path, name])) {\n    //   throw new Error(`Duplicate ${type}: \"${name}\"`)\n    // }\n\n    set(components, [component, path, name], assign({\n      label: label,\n    }, replacement))\n  }\n\n  const addNested = (name: string, configs: Configs) => {\n    return walkConfigs(configs, (key: string, config: Config) => {\n\n      if (typeof config === `object`) {\n        if (config.visibleIf) {\n          config.visibleIf = `${name}.${config.visibleIf}`\n        }\n\n        config.longLabel = `${startCase(name)} ⇢ ${config.longLabel ? config.longLabel : (config.label ? config.label : startCase(key))}`\n      }\n\n      return {\n        key: `${name}.${key}`,\n        config,\n      }\n    })\n  }\n\n  const addGroup = (\n    name: string,\n    label: string,\n    configs: Configs,\n    nesting = true,\n    type = `group`,\n    /* eslint-disable-next-line no-unused-vars */\n    callback?: (_: string, _2: Config) => void,\n  ) => {\n    setComponentGroup(name, label, configs, type)\n\n    return walkConfigs(configs, (key: string, config: ConfigObject) => {\n      config.group = config.group ? `${name}.${config.group}` : name\n\n      if (callback) {\n        callback(key, config)\n      }\n\n      return {\n        key: nesting ? `${name}.${key}` : key,\n        config,\n      }\n    })\n  }\n\n  const addFeature = (name: string, label: string, configs: Configs, enabled = false, nesting = true) => {\n\n    if (has(configs, `enabled`)) {\n      throw new Error(`Feature \"${name}\" should not contain a property named \"enabled\".`)\n    }\n\n    configs = assign({\n      enabled: standardizeConfig(`enabled`, enabled),\n    }, configs)\n\n    configs = addGroup(name, label, configs, nesting, `group`, (key, config) => {\n      if (key !== `enabled`) {\n        typeof config === `object` && lodash.set(config, `visibleIf`, `${name}.enabled`)\n      }\n    })\n\n    return configs as StandardizedConfigs\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  type AddFieldCallbackInnerFuncType = (key: string, config: Config) => void\n\n  const addField = (\n    key: string,\n    // eslint-disable-next-line no-unused-vars\n    callback?: (arg: { insert: AddFieldCallbackInnerFuncType, modify: AddFieldCallbackInnerFuncType }) => void,\n  ) => {\n\n    let fields: Configs = {}\n\n    const visibleIf = `${key}.isVisible`\n\n    const prettyKey = startCase(key)\n\n    fields.isVisible = {\n      default: true,\n      label: `Visible`,\n      longLabel: `${prettyKey} ⇢ Visible`,\n      styleClasses: `col-md-2`,\n    }\n\n    fields.required = {\n      default: false,\n      label: `Required`,\n      longLabel: `${prettyKey} ⇢ Required`,\n      visibleIf: visibleIf,\n      styleClasses: `col-md-2`,\n    }\n\n    fields.disabled = {\n      default: false,\n      label: `Disabled`,\n      longLabel: `${prettyKey} ⇢ Disabled`,\n      visibleIf: visibleIf,\n      styleClasses: `col-md-2`,\n    }\n\n    fields.readonly = {\n      default: false,\n      label: `Readonly`,\n      longLabel: `${prettyKey} ⇢ Readonly`,\n      visibleIf: visibleIf,\n      styleClasses: `col-md-2`,\n    }\n\n    fields.hasAutoFocus = {\n      default: false,\n      label: `Autofocus`,\n      longLabel: `${prettyKey} ⇢ Autofocus`,\n      visibleIf: visibleIf,\n      styleClasses: `col-md-2`,\n    }\n\n    fields.pattern = {\n      default: ``,\n      label: `Pattern`,\n      longLabel: `${prettyKey} ⇢ Pattern`,\n      visibleIf: visibleIf,\n      styleClasses: `col-md-12`,\n    }\n\n    if (callback) {\n\n      const insert: AddFieldCallbackInnerFuncType = (key, config) => {\n\n        if (has(fields, key)) {\n          throw new Error(`Field ${key} already exists!`)\n        }\n\n        const parsedConfig = parseConfig(key, config, {\n          visibleIf: visibleIf,\n          styleClasses: `col-md-12`,\n        })\n\n        parsedConfig.longLabel = `${prettyKey} ⇢ ${parsedConfig.label}`\n\n        fields[key] = parsedConfig\n      }\n\n      const modify: AddFieldCallbackInnerFuncType = (key, config) => {\n        merge(fields[key], standardizeConfig(key, config, true))\n      }\n\n      callback && callback({\n        insert,\n        modify,\n      })\n    }\n\n    return addGroup(key, startCase(key), fields, true)\n  }\n\n  const addTab = (label: string, configs: Configs) => {\n\n    const name = kebabCase(label)\n\n    return addGroup(name, label, configs, false, `tab`)\n  }\n\n  return {\n    addNested,\n    addFeature,\n    addGroup,\n    addTab,\n    addField,\n  }\n}\n\nconst parseConfigsAndComponents = (definitions: Definitions) => {\n\n  const configs: Configs = {}\n  const components = parseComponents(definitions)\n\n  each(definitions, (component, key) => {\n\n    const {\n      getConfigs,\n      getSettings,\n      getTranslations,\n      getUI,\n    } = component\n\n    const options: Partial<ConfigObject> = {\n      component: key,\n    }\n\n    const helpers = getHelpers(components, key)\n\n    if (getConfigs) {\n      parseConfigsIntoCollection(configs, getConfigs(helpers), options)\n    } else {\n\n      if (getSettings) {\n        parseConfigsIntoCollection(configs, getSettings(helpers), assign(options, {\n          category: `setting`,\n        }))\n      }\n\n      if (getTranslations) {\n        parseConfigsIntoCollection(configs, getTranslations(helpers), assign(options, {\n          category: `translation`,\n        }))\n      }\n\n      if (getUI) {\n        parseConfigsIntoCollection(configs, getUI(helpers), assign(options, {\n          category: `ui`,\n        }))\n      }\n    }\n  })\n\n  return {\n    configs,\n    components,\n  }\n}\n\nconst parseComponent = (key: string, component?: ComponentOptions) => {\n  return assign({\n    label: startCase(last(split(key, `.`))),\n    order: 0,\n    toggleable: false,\n    description: null,\n    rootKey: null,\n  }, component) as ComponentOptions\n}\n\nconst parseComponents = (components: Components) => {\n  return mapValues(components, (component, key: string) => {\n    const { getOptions } = component\n\n    return parseComponent(key, getOptions ? getOptions() : null)\n  }) as Components\n}\n\nconst parseComponentsFromConfigs = (configs: Configs, structure: Components = {}) => {\n\n  // TODO: Place all these types in the \"types\" directory\n  const components: Components = {}\n\n  let hasUnsorted = false\n\n  each(configs, config => {\n    if (typeof config === `object` && has(config, `component`)) {\n      if (!has(components, config.component)) {\n\n        let options = {}\n        if (has(structure, config.component)) {\n          const { getOptions } = structure[config.component]\n          options = getOptions ? getOptions() : structure[config.component]\n        }\n\n        components[config.component] = parseComponent(config.component, options)\n      }\n    } else {\n      hasUnsorted = true\n    }\n  })\n\n  if (hasUnsorted && size(components)) {\n    components.unsorted = parseComponent(`unsorted`, {\n      order: 999,\n    })\n  }\n\n  return components\n}\n\nconst parseSource = async ({ getComponents, getConfigs, getLabel, getName, source }: SourceConfigs) => {\n\n  const name = getName ? await getName() : source\n  const label = getLabel ? await getLabel() : startCase(name)\n\n  const options: Source = {\n    name,\n    label,\n  }\n\n  const grabComponents = getComponents ? await getComponents() : null\n\n  if (getConfigs) {\n    const config = parseConfigs(await getConfigs())\n    const components = parseComponentsFromConfigs(config, grabComponents)\n    merge(options, {\n      config,\n      components,\n    })\n  } else {\n    const { components, configs } = parseConfigsAndComponents(grabComponents)\n    merge(options, {\n      configs,\n      components,\n    })\n  }\n\n  return options\n}\n\nclass SourceError extends Error {\n\n  constructor(source, error) {\n    super(`${error.message} (\"${source}\" source)`)\n    this.name = `SourceError`\n  }\n}\n\nexport { parseSource, SourceError }\n","import { parseSource, SourceConfigs } from './parseSource'\n\nconst parseSourceConfigs = async (source: string, stack: SourceConfigs) => {\n\n  const parsedSource = await parseSource({\n    source,\n    ...stack,\n  })\n\n  return parsedSource.configs\n}\n\nexport { parseSourceConfigs }\n"],"names":["_CATEGORIES","ConfigCategory","ConfigCategoryPlurals","CATEGORIES","Setting","plural","label","labelPlural","order","Translation","UI","OrganizationSettingV3","TranslationSettingV3","FeatureSettingV3","assign","lodash","mapValues","getTransformationOptions","options","nested","categorized","each","setWith","transformToNested","object","transformed","value","key","Object","get","response","opts","configs","callback","newKey","newValue","helpTransformResponse","config","category","has","transformToConfigValues","_callback","transformFromConfigsToResponse","isObject","kebabCase","last","mapKeys","merge","set","size","split","startCase","unset","getType","standardizeConfig","skipDefaultCheck","Error","default","parseConfig","docLink","docLinkText","hint","type","parseConfigs","parseConfigsIntoCollection","parseUniqueConfigs","parseComponent","component","toggleable","description","rootKey","parseSource","_ref","getComponents","getConfigs","getLabel","getName","source","_temp5","name","_temp3","_temp2","grabComponents","_temp","Promise","resolve","then","_getConfigs","components","structure","hasUnsorted","getOptions","unsorted","parseComponentsFromConfigs","definitions","_parseConfigsAndCompo","parseComponents","getSettings","getTranslations","getUI","helpers","groupTypes","group","path","tab","walkConfigs","walked","addGroup","nesting","replacement","groupExpanded","groupType","holder","setComponentGroup","addNested","visibleIf","longLabel","addFeature","enabled","addTab","addField","fields","prettyKey","isVisible","styleClasses","required","disabled","readonly","hasAutoFocus","pattern","insert","parsedConfig","modify","getHelpers","error","_this","message","this","parseSourceConfigs","stack","parsedSource","e","reject"],"mappings":"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"}